{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Taxonomy Development Tools Guide This guide is designed for the maintainers and editors responsible for managing CCN2 Taxonomies. Initially, the guide provides instructions on preparing your system and initiating a new taxonomy project, which involves several technical procedures. Subsequently, it delves into the process of curating the CCN2 taxonomies, offering detailed guidance on the necessary steps and considerations. Get Your System Ready Create a New Repo Start Curating Taxonomies","title":"Getting started"},{"location":"#taxonomy-development-tools-guide","text":"This guide is designed for the maintainers and editors responsible for managing CCN2 Taxonomies. Initially, the guide provides instructions on preparing your system and initiating a new taxonomy project, which involves several technical procedures. Subsequently, it delves into the process of curating the CCN2 taxonomies, offering detailed guidance on the necessary steps and considerations. Get Your System Ready Create a New Repo Start Curating Taxonomies","title":"Taxonomy Development Tools Guide"},{"location":"Build/","text":"Install Requirements Docker Install Docker and make sure its runnning properly, for example by typing docker ps in your terminal or command line (CMD). If all is ok, you should be seeing something like: CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES Git Make sure you have Git installed . Set up your GitHub user configs git config --global user.name \"your_github_user\" git config --global user.email \"your_github_email\" Create a GitHub personal access token . Set GH_TOKEN environment variable. For Linux and MacOS: You can use nano or any other editor to edit the files. For bash (Linux): nano ~/.bashrc For zshrc (MacOS): nano ~/.zshrc When the file opens, add the environment variable in a new line: export GH_TOKEN=my_github_personal_access_token_here` Reinitialize the configuration file to apply the changes to the current session: source ~/.bashrc or source ~/.zshrc Test your new config open a new Terminal and run: echo $GH_TOKEN For Windows: setx GH_TOKEN my_github_personal_access_token_here To test your new config open a new Command Prompt (Terminal) and run: echo %GH_TOKEN% Taxonomy Development Tools Docker image The Docker image for Taxonomy Development Tools (TDT) will be automatically fetched and installed on your system if it is not already present. To explore the TDT Docker image and its version history, visit the GitHub Container Registry . Manual Download of the Taxonomy Development Tools Docker Image Should you prefer to manually obtain the TDT Docker image, execute the following command: docker pull ghcr.io/brain-bican/taxonomy-development-tools:latest Update Taxonomy Development Tools to the latest version To upgrade an existing TDT Docker image to the most current version, proceed as follows: Terminate all active TDT containers: docker stop $(docker ps -a -q --filter ancestor=ghcr.io/brain-bican/taxonomy-development-tools:latest) Delete the current TDT image and download the newest version: docker rmi $(docker images 'ghcr.io/brain-bican/taxonomy-development-tools:latest' -a -q | uniq) docker pull ghcr.io/brain-bican/taxonomy-development-tools:latest This streamlined approach ensures that you are always working with the latest tools and features available for Taxonomy Development. Build Taxonomy Development Tools (Optional) This step is optional and specifically aimed at users interested in utilizing the development branch of the TDT. Please note that the development branch may exhibit instability. For those looking to use the TDT, it's recommended to follow the Get Taxonomy Development Tools section to obtain a TDT Docker Image. However, as an alternative, you have the option to build the TDT Docker image locally. To do this, clone the project repository and execute the provided command within the root directory of the project: docker build --no-cache -t \"ghcr.io/brain-bican/taxonomy-development-tools\" .","title":"Get Your System Ready"},{"location":"Build/#install-requirements","text":"","title":"Install Requirements"},{"location":"Build/#docker","text":"Install Docker and make sure its runnning properly, for example by typing docker ps in your terminal or command line (CMD). If all is ok, you should be seeing something like: CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES","title":"Docker"},{"location":"Build/#git","text":"Make sure you have Git installed . Set up your GitHub user configs git config --global user.name \"your_github_user\" git config --global user.email \"your_github_email\" Create a GitHub personal access token . Set GH_TOKEN environment variable. For Linux and MacOS: You can use nano or any other editor to edit the files. For bash (Linux): nano ~/.bashrc For zshrc (MacOS): nano ~/.zshrc When the file opens, add the environment variable in a new line: export GH_TOKEN=my_github_personal_access_token_here` Reinitialize the configuration file to apply the changes to the current session: source ~/.bashrc or source ~/.zshrc Test your new config open a new Terminal and run: echo $GH_TOKEN For Windows: setx GH_TOKEN my_github_personal_access_token_here To test your new config open a new Command Prompt (Terminal) and run: echo %GH_TOKEN%","title":"Git"},{"location":"Build/#taxonomy-development-tools-docker-image","text":"The Docker image for Taxonomy Development Tools (TDT) will be automatically fetched and installed on your system if it is not already present. To explore the TDT Docker image and its version history, visit the GitHub Container Registry .","title":"Taxonomy Development Tools Docker image"},{"location":"Build/#manual-download-of-the-taxonomy-development-tools-docker-image","text":"Should you prefer to manually obtain the TDT Docker image, execute the following command: docker pull ghcr.io/brain-bican/taxonomy-development-tools:latest","title":"Manual Download of the Taxonomy Development Tools Docker Image"},{"location":"Build/#update-taxonomy-development-tools-to-the-latest-version","text":"To upgrade an existing TDT Docker image to the most current version, proceed as follows: Terminate all active TDT containers: docker stop $(docker ps -a -q --filter ancestor=ghcr.io/brain-bican/taxonomy-development-tools:latest) Delete the current TDT image and download the newest version: docker rmi $(docker images 'ghcr.io/brain-bican/taxonomy-development-tools:latest' -a -q | uniq) docker pull ghcr.io/brain-bican/taxonomy-development-tools:latest This streamlined approach ensures that you are always working with the latest tools and features available for Taxonomy Development.","title":"Update Taxonomy Development Tools to the latest version"},{"location":"Build/#build-taxonomy-development-tools-optional","text":"This step is optional and specifically aimed at users interested in utilizing the development branch of the TDT. Please note that the development branch may exhibit instability. For those looking to use the TDT, it's recommended to follow the Get Taxonomy Development Tools section to obtain a TDT Docker Image. However, as an alternative, you have the option to build the TDT Docker image locally. To do this, clone the project repository and execute the provided command within the root directory of the project: docker build --no-cache -t \"ghcr.io/brain-bican/taxonomy-development-tools\" .","title":"Build Taxonomy Development Tools (Optional)"},{"location":"Curation/","text":"CCN2 Taxonomy Curation with the Taxonomy Development Tools 1- Pull the latest TDT docker image via following the steps defined in the project GitHub Container Registry . docker pull ghcr.io/brain-bican/taxonomy-development-tools:latest 2- Place your data (ex. AIT115_annotation_sheet.tsv ) and configuration file (ex. test_config.yaml ) into your project's input_data folder. 3- In the project root folder, run following command to ingest your data files: bash ./run.sh make load_data For Windows: run.bat make load_data 4- Run following command to run the online data editor: bash ./run.sh make serve For Windows: run.bat make serve This command will print a set of logs including a log like nanobot::serve: listening on 0.0.0.0:3000 . This means your web editor is ready, and you can start editing your data. 5- You can start browsing web taxonomy editor from: http://localhost:3000/table Saving Edited Data Once you complete your editing, you can run the following command to save your online edited data to your local: bash ./run.sh make save For Windows: run.bat make save Your data will be saved into curation_tables folder","title":"Start Curating Taxonomies"},{"location":"Curation/#ccn2-taxonomy-curation-with-the-taxonomy-development-tools","text":"1- Pull the latest TDT docker image via following the steps defined in the project GitHub Container Registry . docker pull ghcr.io/brain-bican/taxonomy-development-tools:latest 2- Place your data (ex. AIT115_annotation_sheet.tsv ) and configuration file (ex. test_config.yaml ) into your project's input_data folder. 3- In the project root folder, run following command to ingest your data files: bash ./run.sh make load_data For Windows: run.bat make load_data 4- Run following command to run the online data editor: bash ./run.sh make serve For Windows: run.bat make serve This command will print a set of logs including a log like nanobot::serve: listening on 0.0.0.0:3000 . This means your web editor is ready, and you can start editing your data. 5- You can start browsing web taxonomy editor from: http://localhost:3000/table","title":"CCN2 Taxonomy Curation with the Taxonomy Development Tools"},{"location":"Curation/#saving-edited-data","text":"Once you complete your editing, you can run the following command to save your online edited data to your local: bash ./run.sh make save For Windows: run.bat make save Your data will be saved into curation_tables folder","title":"Saving Edited Data"},{"location":"NewRepo/","text":"Creating a new Repository with the Taxonomy Development Tools This is instructions on how to create a CCN2 taxonomy repository in GitHub. This will only need to be done once per taxonomy. You may need assistance from someone with basic unix knowledge in following instructions here. We will walk you though the steps to make a new ontology project 1. Download the wrapper script and pull latest TDT version Linux/Mac: seed-via-docker.sh PC: seed-via-docker.bat Make sure to save the wrapper script in your working directory and that the filetype is correct. You should have git installed - for the repo command to work perfectly, it requires a .gitconfig file in your user directory! First, make sure you have Docker running (you will see the Docker whale in your toolbar on a Mac) To make sure you have the latest version of the TDT installed, run in the command line docker pull ghcr.io/brain-bican/taxonomy-development-tools:latest NOTE: The very first time you run this it may be slow, while docker downloads necessary images. Don't worry, subsequent runs should be much faster! NOTE: Windows users, occasionally it has been reported that files downloaded on a Windows machine get a wrong file ending, for example seed-via-docker.bat.txt instead of seed-via-docker.bat , or, as we will see later, project.yaml.txt instead of project.yaml . If you have problems, double check your files are named correctly after the download! 3. Run the wrapper script You can pass in a configuration file in YAML format that specifies your taxonomy project setup. You can use dir in your command line on PC to ensure that your wrapper script, .gitconfig, and project.yaml (if you so choose) are all in the correct directory before running the wrapper script. Unix (Max, Linux) Using the predefined CCN20230601_project_config.yaml file: ./seed-via-docker.sh -C CCN20230601_project_config.yaml Windows Using the predefined CCN20230601_project_config.yaml config file: seed-via-docker.bat -C CCN20230601_project_config.yaml This will create your starter files in target/nhp_basal_ganglia_taxonomy . It will also prepare an initial release and initialize a local repository (not yet pushed to your Git host site such as GitHub or GitLab). Problems? There are three frequently encountered problems at this stage: No .gitconfig in user directory Spaces is user path During download, your filenames got changed (Windows) No .gitconfig in user directory The seed-via-docker script requires a .gitconfig file in your user directory. If your .gitconfig is in a different directory, you need to change the path in the downloaded seed-via-docker script. For example on Windows (look at seed-via-docker.bat ): docker run -v %userprofile%/.gitconfig:/root/.gitconfig -v %cd%:/work -w /work --rm -ti brain-bican/tdt /tools/tdt.py seed %* %userprofile%/.gitconfig should be changed to the correct path of your local .gitconfig file. Spaces is user path We have had reports of users having trouble if there are paths (say, D:\\data ) contain a space symbol, like D:/Dropbox (Personal) or similar. In this case, we recommend to find a directory you can work in that does not contain a space symbol. You can customize at this stage, but we recommend to first push the changes to you Git hosting site (see next steps). During download, your filenames got changed (Windows) Windows users, occasionally it has been reported that files downloaded on a Windows machine get a wrong file ending, for example seed-via-docker.bat.txt instead of seed-via-docker.bat , or, as we will see later, project.yaml.txt instead of project.yaml . If you have problems, double-check your files are named correctly after the download! 4. Push to Git hosting website The development kit will automatically initialize a git project, add all files and commit. You will need to create a project on you Git hosting site. For GitHub: Go to: https://github.com/new The owner MUST be the org you selected with the github_org option in the project yaml file. Repo name should be same with the repo option Do not initialize with a README (you already have one) Click Create See the section under \"\u2026or push an existing repository from the command line\" For GitLab: Go to: https://gitlab.com/projects/new The owner MUST be the org you selected with the github_org option in the project yaml file. Repo name should be same with the repo option Do not initialize with a README (you already have one) Click 'Create project' See the section under \"Push an existing Git repository\" Follow the instructions there. E.g. (make sure the location of your remote is exactly correct!). cd target/human_m1 git remote add origin https://github.com/hkir-dev/human_m1.git git branch -M main git push -u origin main Note: you can now mv target/human_m1 to anywhere you like in your home directory. Or you can do a fresh checkout from github. Additional You will want to also: enable GitHub actions","title":"Create a New Repo"},{"location":"NewRepo/#creating-a-new-repository-with-the-taxonomy-development-tools","text":"This is instructions on how to create a CCN2 taxonomy repository in GitHub. This will only need to be done once per taxonomy. You may need assistance from someone with basic unix knowledge in following instructions here. We will walk you though the steps to make a new ontology project","title":"Creating a new Repository with the Taxonomy Development Tools"},{"location":"NewRepo/#1-download-the-wrapper-script-and-pull-latest-tdt-version","text":"Linux/Mac: seed-via-docker.sh PC: seed-via-docker.bat Make sure to save the wrapper script in your working directory and that the filetype is correct. You should have git installed - for the repo command to work perfectly, it requires a .gitconfig file in your user directory! First, make sure you have Docker running (you will see the Docker whale in your toolbar on a Mac) To make sure you have the latest version of the TDT installed, run in the command line docker pull ghcr.io/brain-bican/taxonomy-development-tools:latest NOTE: The very first time you run this it may be slow, while docker downloads necessary images. Don't worry, subsequent runs should be much faster! NOTE: Windows users, occasionally it has been reported that files downloaded on a Windows machine get a wrong file ending, for example seed-via-docker.bat.txt instead of seed-via-docker.bat , or, as we will see later, project.yaml.txt instead of project.yaml . If you have problems, double check your files are named correctly after the download!","title":"1. Download the wrapper script and pull latest TDT version"},{"location":"NewRepo/#3-run-the-wrapper-script","text":"You can pass in a configuration file in YAML format that specifies your taxonomy project setup. You can use dir in your command line on PC to ensure that your wrapper script, .gitconfig, and project.yaml (if you so choose) are all in the correct directory before running the wrapper script.","title":"3. Run the wrapper script"},{"location":"NewRepo/#unix-max-linux","text":"Using the predefined CCN20230601_project_config.yaml file: ./seed-via-docker.sh -C CCN20230601_project_config.yaml","title":"Unix (Max, Linux)"},{"location":"NewRepo/#windows","text":"Using the predefined CCN20230601_project_config.yaml config file: seed-via-docker.bat -C CCN20230601_project_config.yaml This will create your starter files in target/nhp_basal_ganglia_taxonomy . It will also prepare an initial release and initialize a local repository (not yet pushed to your Git host site such as GitHub or GitLab).","title":"Windows"},{"location":"NewRepo/#problems","text":"There are three frequently encountered problems at this stage: No .gitconfig in user directory Spaces is user path During download, your filenames got changed (Windows)","title":"Problems?"},{"location":"NewRepo/#no-gitconfig-in-user-directory","text":"The seed-via-docker script requires a .gitconfig file in your user directory. If your .gitconfig is in a different directory, you need to change the path in the downloaded seed-via-docker script. For example on Windows (look at seed-via-docker.bat ): docker run -v %userprofile%/.gitconfig:/root/.gitconfig -v %cd%:/work -w /work --rm -ti brain-bican/tdt /tools/tdt.py seed %* %userprofile%/.gitconfig should be changed to the correct path of your local .gitconfig file.","title":"No .gitconfig in user directory"},{"location":"NewRepo/#spaces-is-user-path","text":"We have had reports of users having trouble if there are paths (say, D:\\data ) contain a space symbol, like D:/Dropbox (Personal) or similar. In this case, we recommend to find a directory you can work in that does not contain a space symbol. You can customize at this stage, but we recommend to first push the changes to you Git hosting site (see next steps).","title":"Spaces is user path"},{"location":"NewRepo/#during-download-your-filenames-got-changed-windows","text":"Windows users, occasionally it has been reported that files downloaded on a Windows machine get a wrong file ending, for example seed-via-docker.bat.txt instead of seed-via-docker.bat , or, as we will see later, project.yaml.txt instead of project.yaml . If you have problems, double-check your files are named correctly after the download!","title":"During download, your filenames got changed (Windows)"},{"location":"NewRepo/#4-push-to-git-hosting-website","text":"The development kit will automatically initialize a git project, add all files and commit. You will need to create a project on you Git hosting site. For GitHub: Go to: https://github.com/new The owner MUST be the org you selected with the github_org option in the project yaml file. Repo name should be same with the repo option Do not initialize with a README (you already have one) Click Create See the section under \"\u2026or push an existing repository from the command line\" For GitLab: Go to: https://gitlab.com/projects/new The owner MUST be the org you selected with the github_org option in the project yaml file. Repo name should be same with the repo option Do not initialize with a README (you already have one) Click 'Create project' See the section under \"Push an existing Git repository\" Follow the instructions there. E.g. (make sure the location of your remote is exactly correct!). cd target/human_m1 git remote add origin https://github.com/hkir-dev/human_m1.git git branch -M main git push -u origin main Note: you can now mv target/human_m1 to anywhere you like in your home directory. Or you can do a fresh checkout from github.","title":"4. Push to Git hosting website"},{"location":"NewRepo/#additional","text":"You will want to also: enable GitHub actions","title":"Additional"},{"location":"QuickStart/","text":"TDT Quick Start Guide Welcome to the Taxonomy Development Tools User Interface Guide. This document is designed to provide comprehensive details on navigating and utilizing the TDT interface efficiently. Whether you are looking to manage data tables, edit information, or leverage advanced features, this quick start guide will guide you through the set up of TDT Install requirements Install GitHub Install Docker Git clone one of the reference projects: human-brain-cell-atlas_v1_neurons human-brain-cell-atlas_v1_non-neuronal nhp_basal_ganglia_taxonomy In this guide nhp_basal_ganglia_taxonomy is used: git clone https://github.com/hkir-dev/nhp_basal_ganglia_taxonomy.git 3. To run the Taxonomy Development Tools, navigate to the Github project folder you have just cloned: cd nhp_basal_ganglia_taxonomy 4. On the terminal, run Taxonomy Development Tools: MacOS and Linux: bash ./run.sh make serve Windows: ``` run.bat make serve ``` Upon successful execution, you should observe a log stating listening on 0.0.0.0:3000 in the terminal and then be able to browse TDT from http://localhost:3000/table Details of the TDT user interface can be found at user interface guide. To create and curate your own taxonomy please follow create your first repository guide.","title":"TDT Quick Start Guide"},{"location":"QuickStart/#tdt-quick-start-guide","text":"Welcome to the Taxonomy Development Tools User Interface Guide. This document is designed to provide comprehensive details on navigating and utilizing the TDT interface efficiently. Whether you are looking to manage data tables, edit information, or leverage advanced features, this quick start guide will guide you through the set up of TDT Install requirements Install GitHub Install Docker Git clone one of the reference projects: human-brain-cell-atlas_v1_neurons human-brain-cell-atlas_v1_non-neuronal nhp_basal_ganglia_taxonomy In this guide nhp_basal_ganglia_taxonomy is used: git clone https://github.com/hkir-dev/nhp_basal_ganglia_taxonomy.git 3. To run the Taxonomy Development Tools, navigate to the Github project folder you have just cloned: cd nhp_basal_ganglia_taxonomy 4. On the terminal, run Taxonomy Development Tools: MacOS and Linux: bash ./run.sh make serve Windows: ``` run.bat make serve ``` Upon successful execution, you should observe a log stating listening on 0.0.0.0:3000 in the terminal and then be able to browse TDT from http://localhost:3000/table Details of the TDT user interface can be found at user interface guide. To create and curate your own taxonomy please follow create your first repository guide.","title":"TDT Quick Start Guide"},{"location":"UserInterface/","text":"Taxonomy Development Tools User Interface Guide Welcome to the Taxonomy Development Tools User Interface Guide. This document is designed to provide comprehensive details on navigating and utilizing the TDT interface efficiently. Whether you are looking to manage data tables, edit information, or leverage advanced features, this guide will assist you in making the most out of TDT. Tables Table Management Adding new Records Editing Existing Data Sorting and Filtering Data Actions Save GitHub Controls Make a Release Publish PURL Export CAS Json Export to AnnData Views Tables At the heart of the Taxonomy Development Tools is a robust internal database designed to streamline the management and curation of taxonomy-related data. Access to this database is facilitated through a user-friendly interface, with tables being a central component. To view the available tables, simply navigate to the Tables dropdown menu at the top of the interface. TDT categorizes tables into two main types, each serving distinct purposes: User tables: User tables are created when data is uploaded to the TDT using the load_data operation (https://brain-bican.github.io/taxonomy-development-tools/Curation/). This data is formatted according to the Cell Annotation Schema and organized into multiple interrelated tables. These tables include: - *_metadata : Contains metadata related to the taxonomy. - *_labelset : Houses definitions of the label sets. - *_annotation : Stores annotations for cell types, classes, or states, along with supporting evidence and provenance information. It is designed to be flexible, allowing for additional fields to accommodate user needs or project-specific metadata. - *_annotation_transfer : Tracks annotation transfer records. For detailed information on table structures and fields, refer to the Cell Annotation Schema documentation . System tables: System tables are essential for the internal configurations of TDT and are typically not modified by users. Currently, only a single system table is visible to the users: - table : Lists all loaded tables and the physical location of the backing files. Table Management Adding New Records Add row button can be used to add new records to the table. Editing Existing Data Users can initiate the editing of records by clicking on the pen icon located at the start of each row. This action directs them to a data submission form that supports auto-completion, allowing for efficient data entry. After validating the entered data, users can finalize their edits by clicking the Submit button. Sorting and Filtering Data By clicking on column names, data sort and filter pop-up widget can be activated. This widget allows for the alphabetical sorting of data and the application of conditions to filter data accordingly. Icons next to the column header indicate active sorting or filtering, and clicking the column header again lets you update or clear these parameters. Actions Save All user modifications are automatically saved to the internal database. However, if user wants to save changes back to the source tsv files located in the project curation_tables/ folder, save action can be utilized. GitHub Controls Details to be added Make a Release Details to be added Publish PURL A Permanent URL (PURL) provides a stable link that always directs users to the same digital content. The Publish PURL allows you to generate a PURL for the current taxonomy version, ensuring consistent access to it. For instance, a taxonomy might be accessible through a PURL like: https://purl.brain-bican.org/taxonomy/CCN202210140/CS202210140_neurons.json --> redirects to --> https://raw.githubusercontent.com/brain-bican/human-brain-cell-atlas_v1_neurons/main/CS202210140.json Create a PURL once you deem the taxonomy mature enough for community sharing. This process will generate a PURL configuration file and initiate a pull request to the purl.brain-bican.org repository . Note: This step requires a fork of the purl.brain-bican.org repository in case you lack write access. Please ensure any existing forks are removed to avoid conflicts. The system will alert you if an existing fork is detected. Export CAS Json This action converts all data into a JSON file formatted according to the Cell Annotation Schema located in the project's root directory. Export to AnnData Apply your modifications directly to the associated AnnData file for the taxonomy. The *_metadata table contains a matrix_file_id column, representing a resolvable ID for a cell-by-gene matrix file, formatted as namespace:accession . For example, CellXGene_dataset:8e10f1c4-8e98-41e5-b65f-8cd89a887122 (Please refer to the cell-annotation-schema registry for a list of supported namespaces.) WUpon initial launch, TDT creates a tdt_datasets directory in the user home folder. It attempts to resolve all matrix_file_id references within this directory. The system searches for the corresponding file (e.g., $HOME/tdt_datasets/8e10f1c4-8e98-41e5-b65f-8cd89a887122.h5ad ) and then initiates a cas-tools flatten operation . This process, which may vary in duration depending on the taxonomy's size, results in a new AnnData file ( /tdt_datasets/$$TAXONOMY_ID$$.h5ad ) incorporating the user's annotations. Views Annotation tables are equipped to display data in a hierarchical structure, offering a more intuitive understanding of relationships within the taxonomy. To access this perspective, simply click on the Taxonomy View button. While in the Taxonomy View, users can visually explore the taxonomy's structure in a read-only format, providing a clear overview of the hierarchical relationships. To switch back to a more detailed and interactive tabular format, click the Table View button.","title":"Taxonomy Development Tools User Interface Guide"},{"location":"UserInterface/#taxonomy-development-tools-user-interface-guide","text":"Welcome to the Taxonomy Development Tools User Interface Guide. This document is designed to provide comprehensive details on navigating and utilizing the TDT interface efficiently. Whether you are looking to manage data tables, edit information, or leverage advanced features, this guide will assist you in making the most out of TDT. Tables Table Management Adding new Records Editing Existing Data Sorting and Filtering Data Actions Save GitHub Controls Make a Release Publish PURL Export CAS Json Export to AnnData Views","title":"Taxonomy Development Tools User Interface Guide"},{"location":"UserInterface/#tables","text":"At the heart of the Taxonomy Development Tools is a robust internal database designed to streamline the management and curation of taxonomy-related data. Access to this database is facilitated through a user-friendly interface, with tables being a central component. To view the available tables, simply navigate to the Tables dropdown menu at the top of the interface. TDT categorizes tables into two main types, each serving distinct purposes: User tables: User tables are created when data is uploaded to the TDT using the load_data operation (https://brain-bican.github.io/taxonomy-development-tools/Curation/). This data is formatted according to the Cell Annotation Schema and organized into multiple interrelated tables. These tables include: - *_metadata : Contains metadata related to the taxonomy. - *_labelset : Houses definitions of the label sets. - *_annotation : Stores annotations for cell types, classes, or states, along with supporting evidence and provenance information. It is designed to be flexible, allowing for additional fields to accommodate user needs or project-specific metadata. - *_annotation_transfer : Tracks annotation transfer records. For detailed information on table structures and fields, refer to the Cell Annotation Schema documentation . System tables: System tables are essential for the internal configurations of TDT and are typically not modified by users. Currently, only a single system table is visible to the users: - table : Lists all loaded tables and the physical location of the backing files.","title":"Tables"},{"location":"UserInterface/#table-management","text":"","title":"Table Management"},{"location":"UserInterface/#adding-new-records","text":"Add row button can be used to add new records to the table.","title":"Adding New Records"},{"location":"UserInterface/#editing-existing-data","text":"Users can initiate the editing of records by clicking on the pen icon located at the start of each row. This action directs them to a data submission form that supports auto-completion, allowing for efficient data entry. After validating the entered data, users can finalize their edits by clicking the Submit button.","title":"Editing Existing Data"},{"location":"UserInterface/#sorting-and-filtering-data","text":"By clicking on column names, data sort and filter pop-up widget can be activated. This widget allows for the alphabetical sorting of data and the application of conditions to filter data accordingly. Icons next to the column header indicate active sorting or filtering, and clicking the column header again lets you update or clear these parameters.","title":"Sorting and Filtering Data"},{"location":"UserInterface/#actions","text":"","title":"Actions"},{"location":"UserInterface/#save","text":"All user modifications are automatically saved to the internal database. However, if user wants to save changes back to the source tsv files located in the project curation_tables/ folder, save action can be utilized.","title":"Save"},{"location":"UserInterface/#github-controls","text":"Details to be added","title":"GitHub Controls"},{"location":"UserInterface/#make-a-release","text":"Details to be added","title":"Make a Release"},{"location":"UserInterface/#publish-purl","text":"A Permanent URL (PURL) provides a stable link that always directs users to the same digital content. The Publish PURL allows you to generate a PURL for the current taxonomy version, ensuring consistent access to it. For instance, a taxonomy might be accessible through a PURL like: https://purl.brain-bican.org/taxonomy/CCN202210140/CS202210140_neurons.json --> redirects to --> https://raw.githubusercontent.com/brain-bican/human-brain-cell-atlas_v1_neurons/main/CS202210140.json Create a PURL once you deem the taxonomy mature enough for community sharing. This process will generate a PURL configuration file and initiate a pull request to the purl.brain-bican.org repository . Note: This step requires a fork of the purl.brain-bican.org repository in case you lack write access. Please ensure any existing forks are removed to avoid conflicts. The system will alert you if an existing fork is detected.","title":"Publish PURL"},{"location":"UserInterface/#export-cas-json","text":"This action converts all data into a JSON file formatted according to the Cell Annotation Schema located in the project's root directory.","title":"Export CAS Json"},{"location":"UserInterface/#export-to-anndata","text":"Apply your modifications directly to the associated AnnData file for the taxonomy. The *_metadata table contains a matrix_file_id column, representing a resolvable ID for a cell-by-gene matrix file, formatted as namespace:accession . For example, CellXGene_dataset:8e10f1c4-8e98-41e5-b65f-8cd89a887122 (Please refer to the cell-annotation-schema registry for a list of supported namespaces.) WUpon initial launch, TDT creates a tdt_datasets directory in the user home folder. It attempts to resolve all matrix_file_id references within this directory. The system searches for the corresponding file (e.g., $HOME/tdt_datasets/8e10f1c4-8e98-41e5-b65f-8cd89a887122.h5ad ) and then initiates a cas-tools flatten operation . This process, which may vary in duration depending on the taxonomy's size, results in a new AnnData file ( /tdt_datasets/$$TAXONOMY_ID$$.h5ad ) incorporating the user's annotations.","title":"Export to AnnData"},{"location":"UserInterface/#views","text":"Annotation tables are equipped to display data in a hierarchical structure, offering a more intuitive understanding of relationships within the taxonomy. To access this perspective, simply click on the Taxonomy View button. While in the Taxonomy View, users can visually explore the taxonomy's structure in a read-only format, providing a clear overview of the hierarchical relationships. To switch back to a more detailed and interactive tabular format, click the Table View button.","title":"Views"}]}