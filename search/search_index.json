{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Taxonomy Development Tools Guide This guide is designed for the maintainers and editors responsible for managing BICAN Taxonomies. Quick Start TDT - How to install and launch TDT for existing taxonomies. Intro to TDT - A general introduction to Taxonomy Development: What are taxonomies? Why are they needed? How Taxonomy Development Tools can help you collaboratively develop and publish them? Get Your System Ready - A more detailed guide to setup. Create a taxonomy How to create a a repo for your new taxonomy How to seed your new taxonomy from an existing taxonomy spreadsheet UI Guide - An overview of the user interface and how to use if for editing, saving, publishing and exporting taxonomies. Updating TDT - How to update your repo to run the latest version of TDT.","title":"Getting started"},{"location":"#taxonomy-development-tools-guide","text":"This guide is designed for the maintainers and editors responsible for managing BICAN Taxonomies. Quick Start TDT - How to install and launch TDT for existing taxonomies. Intro to TDT - A general introduction to Taxonomy Development: What are taxonomies? Why are they needed? How Taxonomy Development Tools can help you collaboratively develop and publish them? Get Your System Ready - A more detailed guide to setup. Create a taxonomy How to create a a repo for your new taxonomy How to seed your new taxonomy from an existing taxonomy spreadsheet UI Guide - An overview of the user interface and how to use if for editing, saving, publishing and exporting taxonomies. Updating TDT - How to update your repo to run the latest version of TDT.","title":"Taxonomy Development Tools Guide"},{"location":"Build/","text":"Install Requirements This document contains all the necessary steps to install and cofigure GitHub and Docker. Install Requirements Docker Git Installation Configure Create a Git access token Set a GH-TOKEN environment Taxonomy Development Tools Docker image Manual Download of the Taxonomy Development Tools Docker Image Build Taxonomy Development Tools (Optional) Docker Install Docker desktop . To make sure it is running properly, type Docker ps on the command line(CMD) or on the terminal make sure its runnning properly, for example by typing docker ps in your terminal or command line (CMD). If all is ok, you should be seeing something like: CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES Git You can set up Git through the command line or through GitHub desktop. Installation Make sure you have Git installed . Usually, git is already installed as a default option in linux, mac and windows machines, if this is not the case for your machine, simply follow the instructions in this link . Configure You can configure your GitHub account either from the command line or from the Desktop GUI interface. For additional documentation on setting up your GitHub account follow this link . Set a GitHub account online by following the prompts. Configure Git using the command line or terminal: git config --global user.name \"your_github_user\" git config --global user.email \"your_github_email\" Install GitHub Desktop (reccomended but not compulsory). Sign in with your GitHub account on GitHub Desktop. GitHub desktop will automatically detect the GitHub username and account used to configure your machine. More informations on GitHub, the Desktop app and the machine configuration can be found here . Create a Git access token To access the TDT you need a personal access token from GitHub. A personal access token is a string of characters that is used to authenticate your account when accessing online resources (i.e. the TDT database) instead of using your password. You should keep your personal access token as a password. Here there are the steps to generate a personal access token. What do you need to generate a personal access token: A GitHub email account. Git configured on your machine. A GitHub mobile app for autentication. On GitHub there are two type of personal access token : classic and fine-grained. For the TDT you need to generate a fine-grained personal access token. Login to the GitHub webpage and autenticate your e-mail. In the top right corner of the dashboard, select your account profile: On the side menu select settings . In the settings menu, at the bottom of the left side bar, select < > Developer settings . On the left sidebar, select the Personal access tokens , on the dropdown options select Tokens (Classic) . Select Generate a new token and on the dropdown menu select Generate a new token (classic) This step will require autentication with the mobile app. Add a note specifying the use of the token and call it \"Taxonomy_development_tool\". Under the Expiration dropdown menu select the option no expiration . Under the Select scopes list select the option repo and read:org . At the bottom left of the page, select Generate token . Save this token on a text editor and keep it secure. It will be needed for the downstream steps. Once you've created the new token, it may be necessary to execute the command git credential-cache exit to clear the old token, preventing any potential conflicts. Set GH-TOKEN environment variable To configure the GH_TOKEN environment variable, please follow the instructions specific to your operating system. For Linux and macOS: You can use nano or any other editor to edit the files. For bash (Linux): nano ~/.bashrc For zshrc (MacOS): nano ~/.zshrc This way you would open the 'zshrc' file (in MacOS) or the 'bashrc' (in Linux). When the file opens, add the environment variable in a new line and insert the personal access token generated in the previous steps : export GH_TOKEN=my_github_personal_access_token_here` Save and close the file, if you are using nano press crtl+X to exit and Y to save the file. Reinitialize the configuration file to apply the changes to the current session: For bash (Linux): source ~/.bashrc or zshrc (MacOS) source ~/.zshrc Test your new config open a new Terminal and run: echo $GH_TOKEN your GitHub access token should be displayed. For Windows: Open the command line and type: setx GH_TOKEN my_github_personal_access_token_here To test your new config open a new Command Prompt (Terminal) and run: echo %GH_TOKEN% Taxonomy Development Tools Docker image The Docker image for Taxonomy Development Tools (TDT) will be automatically fetched and installed on your system if it is not already present. To explore the TDT Docker image and its version history, visit the GitHub Container Registry . Manual Download of the Taxonomy Development Tools Docker Image Should you prefer to manually obtain the TDT Docker image, execute the following command: docker pull ghcr.io/brain-bican/taxonomy-development-tools:latest Build Taxonomy Development Tools (Optional) This step is optional and specifically aimed at users interested in utilizing the development branch of the TDT. Please note that the development branch may exhibit instability. For those looking to use the TDT, it's recommended to follow the Get Taxonomy Development Tools section to obtain a TDT Docker Image. However, as an alternative, you have the option to build the TDT Docker image locally. To do this, clone the project repository and execute the provided command within the root directory of the project: docker build --no-cache -t \"ghcr.io/brain-bican/taxonomy-development-tools\" .","title":"Install Requirements"},{"location":"Build/#install-requirements","text":"This document contains all the necessary steps to install and cofigure GitHub and Docker. Install Requirements Docker Git Installation Configure Create a Git access token Set a GH-TOKEN environment Taxonomy Development Tools Docker image Manual Download of the Taxonomy Development Tools Docker Image Build Taxonomy Development Tools (Optional)","title":"Install Requirements"},{"location":"Build/#docker","text":"Install Docker desktop . To make sure it is running properly, type Docker ps on the command line(CMD) or on the terminal make sure its runnning properly, for example by typing docker ps in your terminal or command line (CMD). If all is ok, you should be seeing something like: CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES","title":"Docker"},{"location":"Build/#git","text":"You can set up Git through the command line or through GitHub desktop.","title":"Git"},{"location":"Build/#installation","text":"Make sure you have Git installed . Usually, git is already installed as a default option in linux, mac and windows machines, if this is not the case for your machine, simply follow the instructions in this link .","title":"Installation"},{"location":"Build/#configure","text":"You can configure your GitHub account either from the command line or from the Desktop GUI interface. For additional documentation on setting up your GitHub account follow this link . Set a GitHub account online by following the prompts. Configure Git using the command line or terminal: git config --global user.name \"your_github_user\" git config --global user.email \"your_github_email\" Install GitHub Desktop (reccomended but not compulsory). Sign in with your GitHub account on GitHub Desktop. GitHub desktop will automatically detect the GitHub username and account used to configure your machine. More informations on GitHub, the Desktop app and the machine configuration can be found here .","title":"Configure"},{"location":"Build/#create-a-git-access-token","text":"To access the TDT you need a personal access token from GitHub. A personal access token is a string of characters that is used to authenticate your account when accessing online resources (i.e. the TDT database) instead of using your password. You should keep your personal access token as a password. Here there are the steps to generate a personal access token. What do you need to generate a personal access token: A GitHub email account. Git configured on your machine. A GitHub mobile app for autentication. On GitHub there are two type of personal access token : classic and fine-grained. For the TDT you need to generate a fine-grained personal access token. Login to the GitHub webpage and autenticate your e-mail. In the top right corner of the dashboard, select your account profile: On the side menu select settings . In the settings menu, at the bottom of the left side bar, select < > Developer settings . On the left sidebar, select the Personal access tokens , on the dropdown options select Tokens (Classic) . Select Generate a new token and on the dropdown menu select Generate a new token (classic) This step will require autentication with the mobile app. Add a note specifying the use of the token and call it \"Taxonomy_development_tool\". Under the Expiration dropdown menu select the option no expiration . Under the Select scopes list select the option repo and read:org . At the bottom left of the page, select Generate token . Save this token on a text editor and keep it secure. It will be needed for the downstream steps. Once you've created the new token, it may be necessary to execute the command git credential-cache exit to clear the old token, preventing any potential conflicts.","title":"Create a Git access token"},{"location":"Build/#set-gh-token-environment-variable","text":"To configure the GH_TOKEN environment variable, please follow the instructions specific to your operating system. For Linux and macOS: You can use nano or any other editor to edit the files. For bash (Linux): nano ~/.bashrc For zshrc (MacOS): nano ~/.zshrc This way you would open the 'zshrc' file (in MacOS) or the 'bashrc' (in Linux). When the file opens, add the environment variable in a new line and insert the personal access token generated in the previous steps : export GH_TOKEN=my_github_personal_access_token_here` Save and close the file, if you are using nano press crtl+X to exit and Y to save the file. Reinitialize the configuration file to apply the changes to the current session: For bash (Linux): source ~/.bashrc or zshrc (MacOS) source ~/.zshrc Test your new config open a new Terminal and run: echo $GH_TOKEN your GitHub access token should be displayed. For Windows: Open the command line and type: setx GH_TOKEN my_github_personal_access_token_here To test your new config open a new Command Prompt (Terminal) and run: echo %GH_TOKEN%","title":"Set GH-TOKEN environment variable"},{"location":"Build/#taxonomy-development-tools-docker-image","text":"The Docker image for Taxonomy Development Tools (TDT) will be automatically fetched and installed on your system if it is not already present. To explore the TDT Docker image and its version history, visit the GitHub Container Registry .","title":"Taxonomy Development Tools Docker image"},{"location":"Build/#manual-download-of-the-taxonomy-development-tools-docker-image","text":"Should you prefer to manually obtain the TDT Docker image, execute the following command: docker pull ghcr.io/brain-bican/taxonomy-development-tools:latest","title":"Manual Download of the Taxonomy Development Tools Docker Image"},{"location":"Build/#build-taxonomy-development-tools-optional","text":"This step is optional and specifically aimed at users interested in utilizing the development branch of the TDT. Please note that the development branch may exhibit instability. For those looking to use the TDT, it's recommended to follow the Get Taxonomy Development Tools section to obtain a TDT Docker Image. However, as an alternative, you have the option to build the TDT Docker image locally. To do this, clone the project repository and execute the provided command within the root directory of the project: docker build --no-cache -t \"ghcr.io/brain-bican/taxonomy-development-tools\" .","title":"Build Taxonomy Development Tools (Optional)"},{"location":"Collaboration/","text":"Collaborative working with TDT The Taxonomy Development Tools (TDT) platform is designed to facilitate collaborative working on taxonomy projects. This guide explains how to work with TDT in a team environment, including how to save, share, and review annotations. TDT is not an online tool, but a local application that runs on your machine. To collaborate with others, TDT use a version control system (Git) and a remote repository on GitHub in the background. This way, you can share your work with others, review their annotations, and keep track of changes. Saving Your Work You can use the TDT interface to save your work at any time. To save your progress, use action Actions > File > Save . This action will: - Save your progress to the local filesystem (local files can be found at curation_tables directory) . - Gets the latest changes from the remote repository. - Automatically merges the changes with your local changes. - If there are any conflicts that couldn't be automatically resolved, you will be prompted to resolve them. Please see Manually Resolve Conflicts - Pushes the merged changes to the remote repository. Manually Resolve Conflicts In some cases git may not be able to automatically resolve conflicts. If this happens, you will need to manually resolve the conflicts. TDT will provide you the list of files that have conflicts. You can use any text editor to resolve the conflicts. Once you have resolved the conflicts, you can re-run Actions > File > Save to push the changes to the remote repository. Git highlights the conflicts in the files with the <<<<<<< and >>>>>>> markers. For example: In this example the conflict is in the annotation of Mono_3 . Section starting with <<<<<<< HEAD to ======= is the remote version of the file, and the section starting with ======= to >>>>>>> is the local version of the file. You need to resolve the conflict by choosing which version to keep or by combining the two versions. Once you have resolved the conflicts manually (there are no <<<<<<< , ======= and >>>>>>> tagged lines in the file), you can re-run Actions > File > Save to push the changes to the remote repository.","title":"Collaborative working with TDT"},{"location":"Collaboration/#collaborative-working-with-tdt","text":"The Taxonomy Development Tools (TDT) platform is designed to facilitate collaborative working on taxonomy projects. This guide explains how to work with TDT in a team environment, including how to save, share, and review annotations. TDT is not an online tool, but a local application that runs on your machine. To collaborate with others, TDT use a version control system (Git) and a remote repository on GitHub in the background. This way, you can share your work with others, review their annotations, and keep track of changes.","title":"Collaborative working with TDT"},{"location":"Collaboration/#saving-your-work","text":"You can use the TDT interface to save your work at any time. To save your progress, use action Actions > File > Save . This action will: - Save your progress to the local filesystem (local files can be found at curation_tables directory) . - Gets the latest changes from the remote repository. - Automatically merges the changes with your local changes. - If there are any conflicts that couldn't be automatically resolved, you will be prompted to resolve them. Please see Manually Resolve Conflicts - Pushes the merged changes to the remote repository.","title":"Saving Your Work"},{"location":"Collaboration/#manually-resolve-conflicts","text":"In some cases git may not be able to automatically resolve conflicts. If this happens, you will need to manually resolve the conflicts. TDT will provide you the list of files that have conflicts. You can use any text editor to resolve the conflicts. Once you have resolved the conflicts, you can re-run Actions > File > Save to push the changes to the remote repository. Git highlights the conflicts in the files with the <<<<<<< and >>>>>>> markers. For example: In this example the conflict is in the annotation of Mono_3 . Section starting with <<<<<<< HEAD to ======= is the remote version of the file, and the section starting with ======= to >>>>>>> is the local version of the file. You need to resolve the conflict by choosing which version to keep or by combining the two versions. Once you have resolved the conflicts manually (there are no <<<<<<< , ======= and >>>>>>> tagged lines in the file), you can re-run Actions > File > Save to push the changes to the remote repository.","title":"Manually Resolve Conflicts"},{"location":"Curation/","text":"Seed your taxonomy from a spreadsheet Pull the latest TDT docker image via following the steps defined in the project GitHub Container Registry : docker pull ghcr.io/brain-bican/taxonomy-development-tools:latest Follow instructions here to prepare your ingest config file Save config file and informal spreadsheet taxonomy (as tsv) into your project's input_data folder. (ex. AIT115_annotation_sheet.tsv ) and configuration file (ex. test_config.yaml ) Note: Please ensure that file names do not include spaces, as they can cause issues when using the command line. In the project root folder, run following command to ingest your data files: bash ./run.sh make load_data For Windows: run.bat make load_data Problems? There are three frequently encountered problems at this stage: Ports are not available Ports are not available You may get an Ports are not available error if the ports used by TDT (3000, 5132) are already in use docker: Error response from daemon: Ports are not available: exposing port TCP 0.0.0.0:XXXX -> 0.0.0.0:0: listen tcp 0.0.0.0:XXXX: bind: address already in use. Generally main reason for this error is that another instance of the TDT is already running. You can find the running instance on the Docker Desktop and stop it. Alternatively, you can run the following command to get the container id of the running instance: docker ps -a -q --filter ancestor=ghcr.io/brain-bican/taxonomy-development-tools copy the container id and stop the container using the following command: docker stop <container_id> If this error is not caused by an already running TDT instance, we need to find and stop the service using the port. To identify the service using the port, run the following command: lsof -i -P | grep LISTEN | grep :$PORT then stop the service using the port: kill -9 <PID> where <PID> is the process id of the service using the port.","title":"Start Curating Taxonomies"},{"location":"Curation/#seed-your-taxonomy-from-a-spreadsheet","text":"Pull the latest TDT docker image via following the steps defined in the project GitHub Container Registry : docker pull ghcr.io/brain-bican/taxonomy-development-tools:latest Follow instructions here to prepare your ingest config file Save config file and informal spreadsheet taxonomy (as tsv) into your project's input_data folder. (ex. AIT115_annotation_sheet.tsv ) and configuration file (ex. test_config.yaml ) Note: Please ensure that file names do not include spaces, as they can cause issues when using the command line. In the project root folder, run following command to ingest your data files: bash ./run.sh make load_data For Windows: run.bat make load_data","title":"Seed your taxonomy from a spreadsheet"},{"location":"Curation/#problems","text":"There are three frequently encountered problems at this stage: Ports are not available","title":"Problems?"},{"location":"Curation/#ports-are-not-available","text":"You may get an Ports are not available error if the ports used by TDT (3000, 5132) are already in use docker: Error response from daemon: Ports are not available: exposing port TCP 0.0.0.0:XXXX -> 0.0.0.0:0: listen tcp 0.0.0.0:XXXX: bind: address already in use. Generally main reason for this error is that another instance of the TDT is already running. You can find the running instance on the Docker Desktop and stop it. Alternatively, you can run the following command to get the container id of the running instance: docker ps -a -q --filter ancestor=ghcr.io/brain-bican/taxonomy-development-tools copy the container id and stop the container using the following command: docker stop <container_id> If this error is not caused by an already running TDT instance, we need to find and stop the service using the port. To identify the service using the port, run the following command: lsof -i -P | grep LISTEN | grep :$PORT then stop the service using the port: kill -9 <PID> where <PID> is the process id of the service using the port.","title":"Ports are not available"},{"location":"Gh_Pages/","text":"Generating Taxonomy Github Pages This feature is supported on TDT versions >= 1.0.7. Please consider upgrading your project through following the upgrade guide The Taxonomy Development Tools (TDT) provides a feature to generate a GitHub Pages site for your taxonomy. This feature allows you to create a user-friendly interface for your taxonomy, making it easier for users to explore and understand the data. These pages also works in synergy with the PURL system, allowing you to create a permanent URL for your taxonomy and cell sets. To generate the GitHub Pages for your taxonomy, follow these steps: 1- In the TDT UI run Actions > Generate > Github Pages This operation will generate documentation on your project root directory under the docs folder and push them to the GitHub. 2- (This step only needed once, at the first publishing of the GH pages) Navigate to your GitHub repository and go to the Settings tab. On the left panel select Pages and under the Code and Automation section. Then select the gh-pages branch in the Branch section and Save . Then please wait for a few minutes for the GitHub Pages to be generated. In the background a GitHub action is preparing that branch for you. Then your taxonomy will be available at https://brain-bican.github.io/<your_repository_name>/ . Troubleshooting If you cannot see the gh_pages branch to select at step 2, you may need to wait a few minutes for the GitHub Pages to be generated. In the background a GitHub action is preparing that branch for you. If the branch is still not visible, please navigate to the Actions tab in your repository and check the status of the Publish mkdocs documentation action. If it is still running, please wait for it to complete (depending on the size of your taxonomy it may take up to 30 minutes). If the action is failed please report an issue on the TDT repository. Please add the failed steps logs to the issue for the swift resolution.","title":"Generate GH Pages"},{"location":"Gh_Pages/#generating-taxonomy-github-pages","text":"This feature is supported on TDT versions >= 1.0.7. Please consider upgrading your project through following the upgrade guide The Taxonomy Development Tools (TDT) provides a feature to generate a GitHub Pages site for your taxonomy. This feature allows you to create a user-friendly interface for your taxonomy, making it easier for users to explore and understand the data. These pages also works in synergy with the PURL system, allowing you to create a permanent URL for your taxonomy and cell sets. To generate the GitHub Pages for your taxonomy, follow these steps: 1- In the TDT UI run Actions > Generate > Github Pages This operation will generate documentation on your project root directory under the docs folder and push them to the GitHub. 2- (This step only needed once, at the first publishing of the GH pages) Navigate to your GitHub repository and go to the Settings tab. On the left panel select Pages and under the Code and Automation section. Then select the gh-pages branch in the Branch section and Save . Then please wait for a few minutes for the GitHub Pages to be generated. In the background a GitHub action is preparing that branch for you. Then your taxonomy will be available at https://brain-bican.github.io/<your_repository_name>/ .","title":"Generating Taxonomy Github Pages"},{"location":"Gh_Pages/#troubleshooting","text":"If you cannot see the gh_pages branch to select at step 2, you may need to wait a few minutes for the GitHub Pages to be generated. In the background a GitHub action is preparing that branch for you. If the branch is still not visible, please navigate to the Actions tab in your repository and check the status of the Publish mkdocs documentation action. If it is still running, please wait for it to complete (depending on the size of your taxonomy it may take up to 30 minutes). If the action is failed please report an issue on the TDT repository. Please add the failed steps logs to the issue for the swift resolution.","title":"Troubleshooting"},{"location":"Intro_to_TDT/","text":"Intro to Taxonomy Development Tools Background Much cell type/class annotation consists simply of names attached to individual cells in a cell-by-gene-matrix. Within the Brain Initiative, it has become standard to extend this simple annotation by associating it with additional information including: hierarchical relationships between annotations; synonyms; annotation provenance (who annotated what); supporting references; annotation transfer from other taxonomies; marker genes; and cell type location, based on dissection and spatial transcriptomics (e.g. MerFish). Extended annotations have been published as standardized \"taxonomies\" following the common cell type nomenclature standard (Miller et al. 2020) and as unstandardised supplementary material {add figure showing examples with refs}. These are published separately from the cell-by-gene-matrices to which they refer, with the only link between the two being the cell type/class name used in annotation (sometimes supplemented by a file mapping cluster to cell IDs). These links break easily (if names are changed) and without a standard for versioning, taxonomies published in papers often do not completely match cell-by-gene-matrices for the same paper published on portals like CZ CELLxGENE. It is also difficult for the community to make use of these taxonomy documents in combination with matrix files. A typical workflow within BICAN starts from an agreed set of clusters. Hierarchical annotations (taxonomies) are built on top of these clusters by combining them to form a hierarchy of nested cell sets with a fixed number of levels (see figure {hierarchical annotation}). Figure {hierarchical annotation} : Hierarchical annotation on an Integrated Human Lung Cell Atlas. Panels A and B show annotation at Levels 2 and 3 of the hierarchy. L2 annotation Airway epithelium encompasses L3 annotations, Basal, secretory and Mucilated lineage. C shows the nested relationship between cell sets in this hierarchy - all cells in the Goblet cell set are in the secretory cell set which are all in the Airway epithelium cell set etc. This can be represented as a simple graph or tree as shown in Panel D - where each cell set has only one parent. These extended annotations are typically developed using informally structured spreadsheets, separate from the data being annotated in cell-by-gene-matrices. This overcomes the typical limitations of cell-by-gene-matrix formats like AnnData, which don't easily support anything more than associating names with individual cells. In spreadsheets, we can record annotations on a smaller number of sets of cells (clusters and combinations of clusters), associating an annotation with a rich context of additional information. Spreadsheets are easy to share and edit, especially if developed on an online platform that can reconcile concurrent edits (e.g. Google Sheets or Microsoft Sharepoint). They can also easily be exported to and from CSV, supporting easy conversion to DataFrames for programmatic population of content. By convention these spreadsheets are structured with one row per cluster. Additional columns record membership of the cluster higher level cell sets and metadata about clusters (see figure {informal_taxonomy}) Figure: {Informal Taxonomy} A fragment of an informal taxonomy spreadsheet used to annotate a cell-by-gene-matrix of cells from the basal ganglion. The first 2 columns contain the IDs and names of clusters. The next three columns assign these clusters to progressively larger cell set groupings: SubClass, Neighbourhood and Class. These become the names of labelsets in CAS/TDT. The proceeding rows record additional metadata about clusters including location based on dissection, markers, cluster size etc. One disadvantage of this approach is that there is no way to record additional metadata about cell sets above the cluster level. This informal method is not without challenges. The connection between these spreadsheets and matrices relies on cluster IDs or cell type/class names. Researchers use ad hoc methods for synchronizing the two, often involving an additional cluster- to-cell-ID mapping file. The structure of the file also does not allow for adding metadata about cell sets above the cluster level. Taxonomy Development Tools We have developed an updated standard for representing taxonomies (Cell Annotation Schema (CAS) {ref}), a graphical editor (Taxonomy Development Tools (TDT)) and a system for publishing, versioning and sharing taxonomies. Importantly, this system tightly integrates taxonomies with cell-by-gene-matrices in AnnData (h5ad) format. The schema, which was developed to support the broader community annotating cell-by-gene matrices, contains a slot for linking to an AnnData file. TDT can use this to check the associated AnnData file is in-sync with the taxonomy, warning about any problems. It can also update the AnnData file when a taxonomy changes. Another important feature is that this is an open standard: it allows authors to define and edit any additional fields that they need on top of the fields standards by CAS (figure). TDT takes the typical informal taxonomy spreadsheets used within BICAN as input, and with some minimal configuration, converts them into a CAS compliant representation and checks this for consistency with a linked AnnData file. Configuration includes specification of which columns represent levels in the hierarchy and what level (or rank) they represent. The name of each of these columns defines a set of annotations called a labelset. Taxonomy_labelsets table in TDT supports recording additional metadata about each labelset. Annotations are represented in a taxonomy_annotations table with one row per cell set (clusters and higher level groupings), allowing metadata to be recorded for all levels . Each row has both CAS standard columns and user-defined columns taken from the original spreadsheet (figure {annotation_table C}) . The CAS standard supports taxonomy hierarchy via specifying parent cell-set (figure {annotation_table A}). An accompanying taxonomy tree view allows users to visualise this hierarchy (figure {annotation_table D}). Other CAS columns include slots for cell ontology terms mappings, synonyms, marker gene evidence, comments and supporting references (figure {annotation_table B}). Editing support includes pick-lists and autocomplete for fields including labelset, parent cell set and cell ontology term. In future, CAS and TDT will expand to include additional fields that are now only supported in user defined fields. A B C D Figure {annotation_table} : A * Core CAS fields: accession (ID), label, hierarchy. B Additional CAS fields allow linking to cell ontology terms, recording marker gene evidence, synonyms, and references. C User defined fields from the original spreadsheet {shown in figure {Informal Taxonomy}. D* Visualization of taxonomy hierarchy as a tree. TDT uses GitHub to support concurrent editing by multiple users and to control access. It does this in a way that insulates users from GitHub, with a simple system for saving and publishing. All that is required of users is that they register an account with GitHub and provide their GitHub username, the email account they used to register and an access token which they can request from GitHub. Saving automatically shares edits with other editors. Publishing generates a named version that can be shared via a simple URL. This allows for tracking of versions used in analysis. The visibility of shared and published taxonomies is controlled via access to the GitHub repo. During development of a taxonomy, we limit this to a group of editors. Once the project is ready to share with the world, the GitHub repo can be made public, allowing anyone with the URL to access it.","title":"Introduction to TDT"},{"location":"Intro_to_TDT/#intro-to-taxonomy-development-tools","text":"","title":"Intro to Taxonomy Development Tools"},{"location":"Intro_to_TDT/#background","text":"Much cell type/class annotation consists simply of names attached to individual cells in a cell-by-gene-matrix. Within the Brain Initiative, it has become standard to extend this simple annotation by associating it with additional information including: hierarchical relationships between annotations; synonyms; annotation provenance (who annotated what); supporting references; annotation transfer from other taxonomies; marker genes; and cell type location, based on dissection and spatial transcriptomics (e.g. MerFish). Extended annotations have been published as standardized \"taxonomies\" following the common cell type nomenclature standard (Miller et al. 2020) and as unstandardised supplementary material {add figure showing examples with refs}. These are published separately from the cell-by-gene-matrices to which they refer, with the only link between the two being the cell type/class name used in annotation (sometimes supplemented by a file mapping cluster to cell IDs). These links break easily (if names are changed) and without a standard for versioning, taxonomies published in papers often do not completely match cell-by-gene-matrices for the same paper published on portals like CZ CELLxGENE. It is also difficult for the community to make use of these taxonomy documents in combination with matrix files. A typical workflow within BICAN starts from an agreed set of clusters. Hierarchical annotations (taxonomies) are built on top of these clusters by combining them to form a hierarchy of nested cell sets with a fixed number of levels (see figure {hierarchical annotation}). Figure {hierarchical annotation} : Hierarchical annotation on an Integrated Human Lung Cell Atlas. Panels A and B show annotation at Levels 2 and 3 of the hierarchy. L2 annotation Airway epithelium encompasses L3 annotations, Basal, secretory and Mucilated lineage. C shows the nested relationship between cell sets in this hierarchy - all cells in the Goblet cell set are in the secretory cell set which are all in the Airway epithelium cell set etc. This can be represented as a simple graph or tree as shown in Panel D - where each cell set has only one parent. These extended annotations are typically developed using informally structured spreadsheets, separate from the data being annotated in cell-by-gene-matrices. This overcomes the typical limitations of cell-by-gene-matrix formats like AnnData, which don't easily support anything more than associating names with individual cells. In spreadsheets, we can record annotations on a smaller number of sets of cells (clusters and combinations of clusters), associating an annotation with a rich context of additional information. Spreadsheets are easy to share and edit, especially if developed on an online platform that can reconcile concurrent edits (e.g. Google Sheets or Microsoft Sharepoint). They can also easily be exported to and from CSV, supporting easy conversion to DataFrames for programmatic population of content. By convention these spreadsheets are structured with one row per cluster. Additional columns record membership of the cluster higher level cell sets and metadata about clusters (see figure {informal_taxonomy}) Figure: {Informal Taxonomy} A fragment of an informal taxonomy spreadsheet used to annotate a cell-by-gene-matrix of cells from the basal ganglion. The first 2 columns contain the IDs and names of clusters. The next three columns assign these clusters to progressively larger cell set groupings: SubClass, Neighbourhood and Class. These become the names of labelsets in CAS/TDT. The proceeding rows record additional metadata about clusters including location based on dissection, markers, cluster size etc. One disadvantage of this approach is that there is no way to record additional metadata about cell sets above the cluster level. This informal method is not without challenges. The connection between these spreadsheets and matrices relies on cluster IDs or cell type/class names. Researchers use ad hoc methods for synchronizing the two, often involving an additional cluster- to-cell-ID mapping file. The structure of the file also does not allow for adding metadata about cell sets above the cluster level.","title":"Background"},{"location":"Intro_to_TDT/#taxonomy-development-tools","text":"We have developed an updated standard for representing taxonomies (Cell Annotation Schema (CAS) {ref}), a graphical editor (Taxonomy Development Tools (TDT)) and a system for publishing, versioning and sharing taxonomies. Importantly, this system tightly integrates taxonomies with cell-by-gene-matrices in AnnData (h5ad) format. The schema, which was developed to support the broader community annotating cell-by-gene matrices, contains a slot for linking to an AnnData file. TDT can use this to check the associated AnnData file is in-sync with the taxonomy, warning about any problems. It can also update the AnnData file when a taxonomy changes. Another important feature is that this is an open standard: it allows authors to define and edit any additional fields that they need on top of the fields standards by CAS (figure). TDT takes the typical informal taxonomy spreadsheets used within BICAN as input, and with some minimal configuration, converts them into a CAS compliant representation and checks this for consistency with a linked AnnData file. Configuration includes specification of which columns represent levels in the hierarchy and what level (or rank) they represent. The name of each of these columns defines a set of annotations called a labelset. Taxonomy_labelsets table in TDT supports recording additional metadata about each labelset. Annotations are represented in a taxonomy_annotations table with one row per cell set (clusters and higher level groupings), allowing metadata to be recorded for all levels . Each row has both CAS standard columns and user-defined columns taken from the original spreadsheet (figure {annotation_table C}) . The CAS standard supports taxonomy hierarchy via specifying parent cell-set (figure {annotation_table A}). An accompanying taxonomy tree view allows users to visualise this hierarchy (figure {annotation_table D}). Other CAS columns include slots for cell ontology terms mappings, synonyms, marker gene evidence, comments and supporting references (figure {annotation_table B}). Editing support includes pick-lists and autocomplete for fields including labelset, parent cell set and cell ontology term. In future, CAS and TDT will expand to include additional fields that are now only supported in user defined fields. A B C D Figure {annotation_table} : A * Core CAS fields: accession (ID), label, hierarchy. B Additional CAS fields allow linking to cell ontology terms, recording marker gene evidence, synonyms, and references. C User defined fields from the original spreadsheet {shown in figure {Informal Taxonomy}. D* Visualization of taxonomy hierarchy as a tree. TDT uses GitHub to support concurrent editing by multiple users and to control access. It does this in a way that insulates users from GitHub, with a simple system for saving and publishing. All that is required of users is that they register an account with GitHub and provide their GitHub username, the email account they used to register and an access token which they can request from GitHub. Saving automatically shares edits with other editors. Publishing generates a named version that can be shared via a simple URL. This allows for tracking of versions used in analysis. The visibility of shared and published taxonomies is controlled via access to the GitHub repo. During development of a taxonomy, we limit this to a group of editors. Once the project is ready to share with the world, the GitHub repo can be made public, allowing anyone with the URL to access it.","title":"Taxonomy Development Tools"},{"location":"NewRepo/","text":"Creating a new Repository with the Taxonomy Development Tools This is instructions on how to create a CCN2 taxonomy repository in GitHub. This will only need to be done once per taxonomy. You may need assistance from someone with basic unix knowledge in following instructions here. We will walk you though the steps to make a new ontology project 1. Download the wrapper script and pull latest TDT version Linux/Mac: seed-via-docker.sh PC: seed-via-docker.bat Make sure to save the wrapper script in your working directory and that the filetype is correct. You should have git installed - for the repo command to work perfectly, it requires a .gitconfig file in your user directory! First, make sure you have Docker running (you will see the Docker whale in your toolbar on a Mac) To make sure you have the latest version of the TDT installed, run in the command line docker pull ghcr.io/brain-bican/taxonomy-development-tools:latest NOTE: The very first time you run this it may be slow, while docker downloads necessary images. Don't worry, subsequent runs should be much faster! NOTE: Windows users, occasionally it has been reported that files downloaded on a Windows machine get a wrong file ending, for example seed-via-docker.bat.txt instead of seed-via-docker.bat , or, as we will see later, project.yaml.txt instead of project.yaml . If you have problems, double check your files are named correctly after the download! 2. Prepare your configuration file: Follow the instructions here 3. Run the wrapper script You can pass in a configuration file in YAML format that specifies your taxonomy project setup. You can use dir in your command line on PC to ensure that your wrapper script, .gitconfig, and project.yaml (if you so choose) are all in the correct directory before running the wrapper script. Unix (Max, Linux) Using the predefined CCN20230601_project_config.yaml file: ./seed-via-docker.sh -C CCN20230601_project_config.yaml Note: If you get a permission error while running the runner script (such as zsh: permission denied: ./seed-via-docker.sh ), please give execution permissions to the script and retry the command: chmod +x seed-via-docker.sh Windows Using the predefined CCN20230601_project_config.yaml config file: seed-via-docker.bat -C CCN20230601_project_config.yaml This will create your starter files in target/nhp_basal_ganglia_taxonomy . It will also prepare an initial release and initialize a local repository (not yet pushed to your Git host site such as GitHub or GitLab). Problems? There are three frequently encountered problems at this stage: No .gitconfig in user directory Spaces is user path During download, your filenames got changed (Windows) No .gitconfig in user directory The seed-via-docker script requires a .gitconfig file in your user directory. If your .gitconfig is in a different directory, you need to change the path in the downloaded seed-via-docker script. For example on Windows (look at seed-via-docker.bat ): docker run -v %userprofile%/.gitconfig:/root/.gitconfig -v %cd%:/work -w /work --rm -ti brain-bican/tdt /tools/tdt.py seed %* %userprofile%/.gitconfig should be changed to the correct path of your local .gitconfig file. Spaces is user path We have had reports of users having trouble if there are paths (say, D:\\data ) contain a space symbol, like D:/Dropbox (Personal) or similar. In this case, we recommend to find a directory you can work in that does not contain a space symbol. You can customize at this stage, but we recommend to first push the changes to you Git hosting site (see next steps). During download, your filenames got changed (Windows) Windows users, occasionally it has been reported that files downloaded on a Windows machine get a wrong file ending, for example seed-via-docker.bat.txt instead of seed-via-docker.bat , or, as we will see later, project.yaml.txt instead of project.yaml . If you have problems, double-check your files are named correctly after the download! 4. Push to Git hosting website The development kit will automatically initialize a git project, add all files and commit. You will need to create a project on you Git hosting site. For GitHub: Go to: https://github.com/new The owner MUST be the org you selected with the github_org option in the project yaml file. Repo name should be same with the repo option Do not initialize with a README (you already have one) Click Create See the section under \"\u2026or push an existing repository from the command line\" For GitLab: Go to: https://gitlab.com/projects/new The owner MUST be the org you selected with the github_org option in the project yaml file. Repo name should be same with the repo option Do not initialize with a README (you already have one) Click 'Create project' See the section under \"Push an existing Git repository\" Follow the instructions there. E.g. (make sure the location of your remote is exactly correct!). cd target/human_m1 git remote add origin https://github.com/hkir-dev/human_m1.git git branch -M main git push -u origin main Note: you can now mv target/human_m1 to anywhere you like in your home directory. Or you can do a fresh checkout from github. 5. Review Your Project on GitHub Your new project repository is now hosted on GitHub. You can view your newly created repository from the previous step (such as https://github.com/hkir-dev/human_m1) on GitHub. If the repository does not meet your expectations, you can delete it from the GitHub settings and begin the process anew. If you are satisfied with the setup, you may proceed to load your data into the project. Additional You will want to also: enable GitHub actions","title":"Create a New Repo"},{"location":"NewRepo/#creating-a-new-repository-with-the-taxonomy-development-tools","text":"This is instructions on how to create a CCN2 taxonomy repository in GitHub. This will only need to be done once per taxonomy. You may need assistance from someone with basic unix knowledge in following instructions here. We will walk you though the steps to make a new ontology project","title":"Creating a new Repository with the Taxonomy Development Tools"},{"location":"NewRepo/#1-download-the-wrapper-script-and-pull-latest-tdt-version","text":"Linux/Mac: seed-via-docker.sh PC: seed-via-docker.bat Make sure to save the wrapper script in your working directory and that the filetype is correct. You should have git installed - for the repo command to work perfectly, it requires a .gitconfig file in your user directory! First, make sure you have Docker running (you will see the Docker whale in your toolbar on a Mac) To make sure you have the latest version of the TDT installed, run in the command line docker pull ghcr.io/brain-bican/taxonomy-development-tools:latest NOTE: The very first time you run this it may be slow, while docker downloads necessary images. Don't worry, subsequent runs should be much faster! NOTE: Windows users, occasionally it has been reported that files downloaded on a Windows machine get a wrong file ending, for example seed-via-docker.bat.txt instead of seed-via-docker.bat , or, as we will see later, project.yaml.txt instead of project.yaml . If you have problems, double check your files are named correctly after the download!","title":"1. Download the wrapper script and pull latest TDT version"},{"location":"NewRepo/#2-prepare-your-configuration-file","text":"Follow the instructions here","title":"2. Prepare your configuration file:"},{"location":"NewRepo/#3-run-the-wrapper-script","text":"You can pass in a configuration file in YAML format that specifies your taxonomy project setup. You can use dir in your command line on PC to ensure that your wrapper script, .gitconfig, and project.yaml (if you so choose) are all in the correct directory before running the wrapper script.","title":"3. Run the wrapper script"},{"location":"NewRepo/#unix-max-linux","text":"Using the predefined CCN20230601_project_config.yaml file: ./seed-via-docker.sh -C CCN20230601_project_config.yaml Note: If you get a permission error while running the runner script (such as zsh: permission denied: ./seed-via-docker.sh ), please give execution permissions to the script and retry the command: chmod +x seed-via-docker.sh","title":"Unix (Max, Linux)"},{"location":"NewRepo/#windows","text":"Using the predefined CCN20230601_project_config.yaml config file: seed-via-docker.bat -C CCN20230601_project_config.yaml This will create your starter files in target/nhp_basal_ganglia_taxonomy . It will also prepare an initial release and initialize a local repository (not yet pushed to your Git host site such as GitHub or GitLab).","title":"Windows"},{"location":"NewRepo/#problems","text":"There are three frequently encountered problems at this stage: No .gitconfig in user directory Spaces is user path During download, your filenames got changed (Windows)","title":"Problems?"},{"location":"NewRepo/#no-gitconfig-in-user-directory","text":"The seed-via-docker script requires a .gitconfig file in your user directory. If your .gitconfig is in a different directory, you need to change the path in the downloaded seed-via-docker script. For example on Windows (look at seed-via-docker.bat ): docker run -v %userprofile%/.gitconfig:/root/.gitconfig -v %cd%:/work -w /work --rm -ti brain-bican/tdt /tools/tdt.py seed %* %userprofile%/.gitconfig should be changed to the correct path of your local .gitconfig file.","title":"No .gitconfig in user directory"},{"location":"NewRepo/#spaces-is-user-path","text":"We have had reports of users having trouble if there are paths (say, D:\\data ) contain a space symbol, like D:/Dropbox (Personal) or similar. In this case, we recommend to find a directory you can work in that does not contain a space symbol. You can customize at this stage, but we recommend to first push the changes to you Git hosting site (see next steps).","title":"Spaces is user path"},{"location":"NewRepo/#during-download-your-filenames-got-changed-windows","text":"Windows users, occasionally it has been reported that files downloaded on a Windows machine get a wrong file ending, for example seed-via-docker.bat.txt instead of seed-via-docker.bat , or, as we will see later, project.yaml.txt instead of project.yaml . If you have problems, double-check your files are named correctly after the download!","title":"During download, your filenames got changed (Windows)"},{"location":"NewRepo/#4-push-to-git-hosting-website","text":"The development kit will automatically initialize a git project, add all files and commit. You will need to create a project on you Git hosting site. For GitHub: Go to: https://github.com/new The owner MUST be the org you selected with the github_org option in the project yaml file. Repo name should be same with the repo option Do not initialize with a README (you already have one) Click Create See the section under \"\u2026or push an existing repository from the command line\" For GitLab: Go to: https://gitlab.com/projects/new The owner MUST be the org you selected with the github_org option in the project yaml file. Repo name should be same with the repo option Do not initialize with a README (you already have one) Click 'Create project' See the section under \"Push an existing Git repository\" Follow the instructions there. E.g. (make sure the location of your remote is exactly correct!). cd target/human_m1 git remote add origin https://github.com/hkir-dev/human_m1.git git branch -M main git push -u origin main Note: you can now mv target/human_m1 to anywhere you like in your home directory. Or you can do a fresh checkout from github.","title":"4. Push to Git hosting website"},{"location":"NewRepo/#5-review-your-project-on-github","text":"Your new project repository is now hosted on GitHub. You can view your newly created repository from the previous step (such as https://github.com/hkir-dev/human_m1) on GitHub. If the repository does not meet your expectations, you can delete it from the GitHub settings and begin the process anew. If you are satisfied with the setup, you may proceed to load your data into the project.","title":"5. Review Your Project on GitHub"},{"location":"NewRepo/#additional","text":"You will want to also: enable GitHub actions","title":"Additional"},{"location":"QuickStart/","text":"TDT Quick Start Guide Welcome to the Taxonomy Development Tools User Interface Guide. This document is designed to provide comprehensive details on navigating and utilizing the TDT interface efficiently. Whether you are looking to manage data tables, edit information, or leverage advanced features, this quick start guide will guide you through the set up of TDT Install requirements : Install GitHub Install Docker Git clone one of the reference projects: human-brain-cell-atlas_v1_neurons human-brain-cell-atlas_v1_non-neuronal nhp_basal_ganglia_taxonomy In this guide nhp_basal_ganglia_taxonomy is used: git clone https://github.com/hkir-dev/nhp_basal_ganglia_taxonomy.git To run the Taxonomy Development Tools, navigate to the GitHub project folder you have just cloned: cd nhp_basal_ganglia_taxonomy On the terminal, run Taxonomy Development Tools: macOS and Linux: bash ./run.sh make serve Windows: run.bat make serve Upon successful execution, you should observe a log stating listening on 0.0.0.0:3000 in the terminal and then be able to browse TDT from http://localhost:3000/table Details of the TDT user interface can be found at user interface guide. To create and curate your own taxonomy please follow create your first repository guide.","title":"Quick Start Guide"},{"location":"QuickStart/#tdt-quick-start-guide","text":"Welcome to the Taxonomy Development Tools User Interface Guide. This document is designed to provide comprehensive details on navigating and utilizing the TDT interface efficiently. Whether you are looking to manage data tables, edit information, or leverage advanced features, this quick start guide will guide you through the set up of TDT Install requirements : Install GitHub Install Docker Git clone one of the reference projects: human-brain-cell-atlas_v1_neurons human-brain-cell-atlas_v1_non-neuronal nhp_basal_ganglia_taxonomy In this guide nhp_basal_ganglia_taxonomy is used: git clone https://github.com/hkir-dev/nhp_basal_ganglia_taxonomy.git To run the Taxonomy Development Tools, navigate to the GitHub project folder you have just cloned: cd nhp_basal_ganglia_taxonomy On the terminal, run Taxonomy Development Tools: macOS and Linux: bash ./run.sh make serve Windows: run.bat make serve Upon successful execution, you should observe a log stating listening on 0.0.0.0:3000 in the terminal and then be able to browse TDT from http://localhost:3000/table Details of the TDT user interface can be found at user interface guide. To create and curate your own taxonomy please follow create your first repository guide.","title":"TDT Quick Start Guide"},{"location":"Review/","text":"Reviewing Annotations in TDT The Taxonomy Development Tools (TDT) platform includes a commenting system designed to facilitate the review and discussion of annotations made by users. This feature is useful for peer review and quality assurance purposes. Important: To ensure that your reviews are visible to other users, please remember to commit and push your changes (using git commit & push). Similarly, others must pull the latest changes to view your reviews. Here's how you can utilize the commenting system: Posting a Comment 1- Navigate to the annotation you wish to review and click the edit or comment icon. 2- Scroll to the bottom of the annotation editing page to find the review section. Here, you can add, update, or delete comments. 3- Click on the Add Review button to open a pop-up window where you can write your comment. 4- In the Reviewer field, your username (GitHub handle) will be pre-filled. In the Review field, select whether you Agree or Disagree with the annotation. Use the Explanation field to elaborate on your opinion. 5- After composing your comment, click Save to add it to the system. To update or delete a comment, use the Edit or Remove buttons respectively. Viewing Reviews You can quickly see if there are reviews on any annotations from the annotation table view: A green comment icon indicates the latest comment agrees with the annotation. A red comment icon shows disagreement. A grey comment icon means there are no comments. Click on the comment icon to see the latest comment details. Requesting Reviews If you would like other users to review your annotations, you can request a review by clicking the Request Review switch on the annotation editing page. At the home page, users will see an icon indicating review is requested for the annotation. This review system not only supports collaboration and feedback but also helps maintain the integrity and accuracy of the annotations in TDT.","title":"Reviewing annotations"},{"location":"Review/#reviewing-annotations-in-tdt","text":"The Taxonomy Development Tools (TDT) platform includes a commenting system designed to facilitate the review and discussion of annotations made by users. This feature is useful for peer review and quality assurance purposes. Important: To ensure that your reviews are visible to other users, please remember to commit and push your changes (using git commit & push). Similarly, others must pull the latest changes to view your reviews. Here's how you can utilize the commenting system:","title":"Reviewing Annotations in TDT"},{"location":"Review/#posting-a-comment","text":"1- Navigate to the annotation you wish to review and click the edit or comment icon. 2- Scroll to the bottom of the annotation editing page to find the review section. Here, you can add, update, or delete comments. 3- Click on the Add Review button to open a pop-up window where you can write your comment. 4- In the Reviewer field, your username (GitHub handle) will be pre-filled. In the Review field, select whether you Agree or Disagree with the annotation. Use the Explanation field to elaborate on your opinion. 5- After composing your comment, click Save to add it to the system. To update or delete a comment, use the Edit or Remove buttons respectively.","title":"Posting a Comment"},{"location":"Review/#viewing-reviews","text":"You can quickly see if there are reviews on any annotations from the annotation table view: A green comment icon indicates the latest comment agrees with the annotation. A red comment icon shows disagreement. A grey comment icon means there are no comments. Click on the comment icon to see the latest comment details.","title":"Viewing Reviews"},{"location":"Review/#requesting-reviews","text":"If you would like other users to review your annotations, you can request a review by clicking the Request Review switch on the annotation editing page. At the home page, users will see an icon indicating review is requested for the annotation. This review system not only supports collaboration and feedback but also helps maintain the integrity and accuracy of the annotations in TDT.","title":"Requesting Reviews"},{"location":"Update/","text":"Updating the TDT Stay up-to-date with the latest version of the Taxonomy Development Tools (TDT) by following these steps: Step 1: Secure Your Work Before updating , ensure all your work is saved and committed to the repository. - Commit and push any pending changes. Use the TDT interface ( Actions > File > Save ) for this purpose. Step 2: Upgrade to the Latest Version Update TDT by pulling the latest Docker image. In the root directory of your project, execute the following command in a terminal: make pull_tdt Note: This operation will kill the running TDT container and update it with the latest version. Step 3: Synchronize Your Work If your administrator has updated the taxonomy repository, you need to synchronize your work with the latest changes. For automatic updates: If your system is set to automatically sync, it will do so when you start TDT. For manual updates: If automatic sync is not enabled, manually pull changes by running these commands in your project's root directory: git pull bash run.sh make clean or you can delete your project and clone it again. Step 4: Administrator Updates If you're managing the taxonomy repository: Update the repository with the following command in the root directory: bash run.sh make upgrade This command needs to be run for two times since the first time it will update the repository (runner scripts as well) and the second time it will update the TDT. After upgrading, launch TDT, review the changes, and save them if they meet your expectations ( Actions > File > Save ). Inform your team about the updates and guide them through the update process as described in Steps 1-3. Encountering Issues? If you run into any problems during the update process, please report an issue on the TDT repository with a detailed description of the problem. Our team will assist you in resolving the issue and ensure a smooth update process.","title":"Update to a newer TDT version"},{"location":"Update/#updating-the-tdt","text":"Stay up-to-date with the latest version of the Taxonomy Development Tools (TDT) by following these steps:","title":"Updating the TDT"},{"location":"Update/#step-1-secure-your-work","text":"Before updating , ensure all your work is saved and committed to the repository. - Commit and push any pending changes. Use the TDT interface ( Actions > File > Save ) for this purpose.","title":"Step 1: Secure Your Work"},{"location":"Update/#step-2-upgrade-to-the-latest-version","text":"Update TDT by pulling the latest Docker image. In the root directory of your project, execute the following command in a terminal: make pull_tdt Note: This operation will kill the running TDT container and update it with the latest version.","title":"Step 2: Upgrade to the Latest Version"},{"location":"Update/#step-3-synchronize-your-work","text":"If your administrator has updated the taxonomy repository, you need to synchronize your work with the latest changes. For automatic updates: If your system is set to automatically sync, it will do so when you start TDT. For manual updates: If automatic sync is not enabled, manually pull changes by running these commands in your project's root directory: git pull bash run.sh make clean or you can delete your project and clone it again.","title":"Step 3: Synchronize Your Work"},{"location":"Update/#step-4-administrator-updates","text":"If you're managing the taxonomy repository: Update the repository with the following command in the root directory: bash run.sh make upgrade This command needs to be run for two times since the first time it will update the repository (runner scripts as well) and the second time it will update the TDT. After upgrading, launch TDT, review the changes, and save them if they meet your expectations ( Actions > File > Save ). Inform your team about the updates and guide them through the update process as described in Steps 1-3.","title":"Step 4: Administrator Updates"},{"location":"Update/#encountering-issues","text":"If you run into any problems during the update process, please report an issue on the TDT repository with a detailed description of the problem. Our team will assist you in resolving the issue and ensure a smooth update process.","title":"Encountering Issues?"},{"location":"UpdateAnnotations/","text":"Programmatically Update Annotations This guide explains how to programmatically update annotations and reload the TDT interface to reflect those changes. This feature is useful for batch updates and can be executed using the cas-tools Python package . Step 1: Save your progress Before updating annotations programmatically (this will take place outside of TDT), ensure all your work is saved and committed to the repository. Use the TDT interface to save your progress as a CAS json file ( Actions > Export > To CAS ) and push it ( Actions > File > Save ) to your GitHub repository. Step 2: Programmatically update annotations CAS json is a plain json file you can edit with any tool you like. The cas-tools Python package facilitates easier programmatic updates to annotations. Please check the cas-tools example notebooks for detailed instructions on using the package to batch add or update annotations. Step 3: Reload TDT After programmatically updating annotations, reload the TDT interface to reflect the changes. Follow these steps: Place the updated CAS json file in the input_data directory of your project. Remove any other files in the directory, except README.md . Load the new data into TDT by running the following command in the root directory of your project: bash run.sh make reload_data Start TDT as usual to see the updated annotations in the interface: bash run.sh make serve","title":"Programmatically update annotations"},{"location":"UpdateAnnotations/#programmatically-update-annotations","text":"This guide explains how to programmatically update annotations and reload the TDT interface to reflect those changes. This feature is useful for batch updates and can be executed using the cas-tools Python package .","title":"Programmatically Update Annotations"},{"location":"UpdateAnnotations/#step-1-save-your-progress","text":"Before updating annotations programmatically (this will take place outside of TDT), ensure all your work is saved and committed to the repository. Use the TDT interface to save your progress as a CAS json file ( Actions > Export > To CAS ) and push it ( Actions > File > Save ) to your GitHub repository.","title":"Step 1: Save your progress"},{"location":"UpdateAnnotations/#step-2-programmatically-update-annotations","text":"CAS json is a plain json file you can edit with any tool you like. The cas-tools Python package facilitates easier programmatic updates to annotations. Please check the cas-tools example notebooks for detailed instructions on using the package to batch add or update annotations.","title":"Step 2: Programmatically update annotations"},{"location":"UpdateAnnotations/#step-3-reload-tdt","text":"After programmatically updating annotations, reload the TDT interface to reflect the changes. Follow these steps: Place the updated CAS json file in the input_data directory of your project. Remove any other files in the directory, except README.md . Load the new data into TDT by running the following command in the root directory of your project: bash run.sh make reload_data Start TDT as usual to see the updated annotations in the interface: bash run.sh make serve","title":"Step 3: Reload TDT"},{"location":"UserInterface/","text":"Taxonomy Development Tools User Interface Guide Welcome to the Taxonomy Development Tools User Interface Guide. This document is designed to provide comprehensive details on navigating and utilizing the TDT interface efficiently. Whether you are looking to manage data tables, edit information, or leverage advanced features, this guide will assist you in making the most out of TDT. Tables At the heart of the Taxonomy Development Tools is a robust internal database designed to streamline the management and curation of taxonomy-related data. Access to this database is facilitated through a user-friendly interface, with tables being a central component. The default view when loading TDT is a view of all of the the available tables. You can return to this at any time via the table option in the Tables dropdown menu at the top of the interface, which can also be used to select specific tables. TDT categorizes tables into two main types, system tables and user tables , each serving distinct purposes. For the purpose of editing taxonomies, our main focus is a set of user tables that reflect taxonomy structure. System tables allow us to inspect the taxonomy schema and to extend it with new columns and datatypes. This is dealt with in the Advanced features section. User tables User tables represent the content of the teaxonomy. The main route by with they are are created is when data is uploaded to the TDT using the load_data operation (https://brain-bican.github.io/taxonomy-development-tools/Curation/). This data is formatted according to the Cell Annotation Schema and organized into multiple interrelated tables. Example: the nhp_basal_ganglia_taxonomy present an annotation table named AIT115_annotation_sheet from this table a series of user tables are generated and displayed in the TDT. original data table For taxonomies seeded from an author-provided table, this is present as a reference for the original table. It is not editable an is named accordingo to the {original_table_name}_annotation_sheet. Example: AIT115_annotation_sheet metadata This table contains all the medatadata related to the taxonomy. For full specifications of the metadata properties, look up the cell annotation schema documentation under the section properties . Columns: author name : The name of the first author of the taxonomy. author contact : Author's email. author list : Name of secondary authors. matrix file ID : A resolvable ID for a cell by gene matrix file. cellannotation schema version : The version of the cell annotation schema. cellannotation timestamp : The time (yyyy-mm-dd) of when the cell annotations are published. cellannotation url : A URL that can be used to resolve the latest published version of this taxonomy (blank if unpublished). labelset Annotations are organised into labelsets - keys grouping related annotations. These correspond to cell annotation keys in a cell by gene matrix, for axmple corresponding to obs keys in an AnnData file. This table contains the names and descriptions of labelsets used in the annotation and, optionally, details of the methodology used to acquire those labels. Full specifications of the labelset can be found in the Cell Annotation Schema documentation under the labelsets section. Columns name : The name of the labelset. description : Description of the labelset. rank : The level of granularity of the annotation with 0 being the most specific. annotation method : The method used for the type of annotation, it can either be algorithmic, manual or both. automated annotation algorithm name : The name of the algorithm used for the automated annotation. automated annotation algorithm verision : The version used for the algorithm. automated annotation algorithm repo url : A resolvable URL of the version control repository of the algorithm used. automated annotation reference location : A resolvable URL of the source of the data. annotation : Stores annotations corresponding to cell types, classes, or states as well as extended metadata about these annotations - including supporting evidence and provenance information. It is designed to be flexible, allowing for additional fields to accommodate user needs or project-specific metadata. In the table, each row corresponds to an annotation of a single cell set - which may be at any level of granularity. Each annotation must belong to a labelset. The annotation table includes Cell Annotation Standard columns and Project specific columns. Further information on the Cell Annotation Standard columns can be found in the Cell annotation schema documentation under the annotations section. The Project specific columns are transferred from the original data table . The Project specific columns allow customisation of the annotation table and flexibility over the annotation of the data. Addtional columns can be added via the columns table (see Advanced features) Columns cell set accession : An identifier that can be used to consistently refer to the set of cells being annotated, even if the cell_label changes. cell label : The cell annotation provided by the author. cell fullname : Cell labels often use short acronyms or abbreviations which can be opaque to users outside a particular community. This field allows taxonomy editors to spell out these acronyms to avoid ambiguity, e.g. a it might spell out 'interneuron' where the label field uses 'int' or 'medium spiny neuron' where the label field uses 'MSN'. labelset : Each annotation must belong to one of a set of predefined keys, defined in the labelsets tabe. Each labelset corresponds to a key used to group related annotations in a cell by gene matrix (an obs key in AnnData). parent cell set accession : The ID of the parent of the set described in this row. This is not editable. It is changed automatically by editing parent cell set name parent cell set name : The name (label) of the cell set which is the parent of the set described in this row. This row is editable via autocomplete. Editing it changes the parent cell set accession automatically. cell ontology term id : The ID of the ontology term in the 'cell ontology term' field. This is not editable. It is changed automatically by editing cell ontology term field. cell ontology term : A term from the cell ontology that most closely matches the cell type/class being annotated in this row. rationale : A free text field describing the reasons that editors believe the cells in the set to correspond to the cell type referenced in the cell_label, cell_fullname and cell ontology term fields. Editors are encouraged to use this field to cite relevant publications in-line using standard academic citations of the form (Zheng et al., 2020). All references cited SHOULD be listed using DOIs under rationale_dois. rationale dois : The DOIs of papers supporting the annotation / references in the rationale . maker gene evidence : List of names of genes whose expression in the cells being annotated is explicitly used as evidence for this cell annotation. Each gene MUST be included in the matrix of the AnnData/Seurat file. synonyms : Synonyms of the cell label . Taxonomy view Annotation tables are equipped to display data in a hierarchical structure, offering a more intuitive understanding of relationships within the taxonomy. To access this perspective, simply click on the Taxonomy View button. While in the Taxonomy View, users can visually explore the taxonomy's structure in a read-only format, providing a clear overview of the hierarchical relationships. To switch back to a more detailed and interactive tabular format, click the Table View button. Alternatively, users can use Browse in table to jump to the node in the table view. Search functionality is available in the Taxonomy View, allowing users to quickly locate specific nodes within the taxonomy. By entering a search term in the search bar, users can reveal the term in the taxonomy tree. Table Management This section shows how to interact with the Tables within the TDT. In this documentation, the overview of the table management is shown with the annotation table. Sorting and Filtering Data By clicking on column names, pop-up widget enabling data-sort and filtering can be activated. This widget allows for the alphabetical sorting of data and the application of conditions to filter data accordingly. Icons next to the column header indicate active sorting or filtering, and clicking the column header again lets you update or clear these parameters. Reset Table To reset the sorting and filtering of the table select the Reset button underneath the table name. Adding New Records Add row button can be used to add new records to the table. By selecting Add row , a new page will open, start inserting the informations for the new row. The option cell set accession will be auto-filled with a new cell set unique identifier. To know what each option represents, hover on the question mark icon near each option. Editing Existing Data Users can edit records by clicking on the pen icon located at the start of each row. This action directs the user to a data submission form that supports autofill, allowing for efficient data entry. After validating the entered data, users can finalize their edits by clicking the Submit button. Some options will have a dropdown menu with suggested terms. For exmaple the annotation.labelset field has a drop-down list of labelsets defined in the labelset` table. Example: In the dataset generated from the AIT115_annotation_sheet , by selecting the empty box for the labelset option the dropdown options are the labelsets Class , Cluster , Neighborhood and Subclass . Example: When editing the parent cell set name , suggested terms will appear as a dropdown menu. Some options will automatically fill other fields linked to them. Example: When changing the parent cell set name field, the parent cell set accession field will also change. To add a pre-existing Cell Ontology term select the cell ontology term option and start typing the cell term of interest. A dropdown menu will appear with different options for pre-existing ontology terms. After selecting the cell ontology term of interest, the cell ontology term option and the cell ontology term ID will be autofilled. Saving existing or new data To save the modified or newly added row select Submit at the bottom right corner of the page. The Validate option will ensure that the terms added in each column follow the Cell Annotation Schema and any additional schema specified for this particular taxonomy. Actions The following menu includes a series of comands to save and export your data. Save All user modifications are automatically saved to the internal database. However, if user wants to save changes back to the source tsv files located in the project curation_tables/ folder, save action can be utilized. In the Actions menu, select the File dropdown menu. Two options will be displayed save and publish . The save button allows to save your progress in a syncronised fashion so that other curators of the same taxonomy can see and track the progress. The syncronisation of the saved progress gives the opportunity to multiple users to work collaboratevely on a unified dataset. The publish button allows to create a public release of the taxonomy on GitHub with a Persistent URL that serves as a resolveable identifier for that release. It is important to note that the accessiblity of a published taxonomy is controlled through GitHub. Editor may choose to publish and share interim versions internally. The Persistent URL serves as a way to permanently referenceand retrieve a version used in analysis. Export Under the Actions menu, select the Export drowpdown menu. Two options will be diplayed To CAS and To AnnData . To CAS This action converts all data into a JSON file formatted according to the Cell Annotation Schema located in the project's root directory. To AnnData Apply your modifications directly to the associated AnnData file for the taxonomy. The metadata table contains a matrix_file_id column, representing a resolvable ID for a cell-by-gene matrix file, formatted as namespace:accession . For example, CellXGene_dataset:8e10f1c4-8e98-41e5-b65f-8cd89a887122 (Please refer to the cell-annotation-schema registry for a list of supported namespaces.) Upon initial launch, TDT creates a tdt_datasets directory in the user home folder. It attempts to resolve all matrix_file_id references within this directory. The system searches for the corresponding file (e.g., $HOME/tdt_datasets/8e10f1c4-8e98-41e5-b65f-8cd89a887122.h5ad ) and then initiates a cas-tools flatten operation . This process, which may vary in duration depending on the taxonomy's size, results in a new AnnData file ( /tdt_datasets/$$TAXONOMY_ID$$.h5ad ) incorporating the user's annotations. Advanced options System tables: System tables allow us to inspect the taxonomy schema and to extend it with new columns and datatypes. table : This table lists all the tables present in the TDT and it appears in the default page of the TDT. datatype : this table shows all the datatype columns present in each table. column : This table contains all the columns present in each table. message : This table contains all validation error messages. Change Table Format The table format can be changed by selecting the Format button underneath the table name. This will open a dropdown menu with a series of options to display the data in different format of a TSV or a CSV table; Plain Text or in a Json raw or page format (for more information about Json format have a look at additional resources ). In addition to the Json raw or page option, the options Json(raw, pretty) and Json(page, pretty) are available to display the data in a Json format that is easier to read. ### Version Control Under the Action dropdown menu, a complete set of Git version control options are available. The verson control menu is intended for comunities of users who are comfortable working with GitHub.","title":"User Interface"},{"location":"UserInterface/#taxonomy-development-tools-user-interface-guide","text":"Welcome to the Taxonomy Development Tools User Interface Guide. This document is designed to provide comprehensive details on navigating and utilizing the TDT interface efficiently. Whether you are looking to manage data tables, edit information, or leverage advanced features, this guide will assist you in making the most out of TDT.","title":"Taxonomy Development Tools User Interface Guide"},{"location":"UserInterface/#tables","text":"At the heart of the Taxonomy Development Tools is a robust internal database designed to streamline the management and curation of taxonomy-related data. Access to this database is facilitated through a user-friendly interface, with tables being a central component. The default view when loading TDT is a view of all of the the available tables. You can return to this at any time via the table option in the Tables dropdown menu at the top of the interface, which can also be used to select specific tables. TDT categorizes tables into two main types, system tables and user tables , each serving distinct purposes. For the purpose of editing taxonomies, our main focus is a set of user tables that reflect taxonomy structure. System tables allow us to inspect the taxonomy schema and to extend it with new columns and datatypes. This is dealt with in the Advanced features section.","title":"Tables"},{"location":"UserInterface/#user-tables","text":"User tables represent the content of the teaxonomy. The main route by with they are are created is when data is uploaded to the TDT using the load_data operation (https://brain-bican.github.io/taxonomy-development-tools/Curation/). This data is formatted according to the Cell Annotation Schema and organized into multiple interrelated tables. Example: the nhp_basal_ganglia_taxonomy present an annotation table named AIT115_annotation_sheet from this table a series of user tables are generated and displayed in the TDT.","title":"User tables"},{"location":"UserInterface/#original-data-table","text":"For taxonomies seeded from an author-provided table, this is present as a reference for the original table. It is not editable an is named accordingo to the {original_table_name}_annotation_sheet. Example: AIT115_annotation_sheet","title":"original data table"},{"location":"UserInterface/#metadata","text":"This table contains all the medatadata related to the taxonomy. For full specifications of the metadata properties, look up the cell annotation schema documentation under the section properties . Columns: author name : The name of the first author of the taxonomy. author contact : Author's email. author list : Name of secondary authors. matrix file ID : A resolvable ID for a cell by gene matrix file. cellannotation schema version : The version of the cell annotation schema. cellannotation timestamp : The time (yyyy-mm-dd) of when the cell annotations are published. cellannotation url : A URL that can be used to resolve the latest published version of this taxonomy (blank if unpublished).","title":"metadata"},{"location":"UserInterface/#labelset","text":"Annotations are organised into labelsets - keys grouping related annotations. These correspond to cell annotation keys in a cell by gene matrix, for axmple corresponding to obs keys in an AnnData file. This table contains the names and descriptions of labelsets used in the annotation and, optionally, details of the methodology used to acquire those labels. Full specifications of the labelset can be found in the Cell Annotation Schema documentation under the labelsets section. Columns name : The name of the labelset. description : Description of the labelset. rank : The level of granularity of the annotation with 0 being the most specific. annotation method : The method used for the type of annotation, it can either be algorithmic, manual or both. automated annotation algorithm name : The name of the algorithm used for the automated annotation. automated annotation algorithm verision : The version used for the algorithm. automated annotation algorithm repo url : A resolvable URL of the version control repository of the algorithm used. automated annotation reference location : A resolvable URL of the source of the data.","title":"labelset"},{"location":"UserInterface/#annotation","text":"Stores annotations corresponding to cell types, classes, or states as well as extended metadata about these annotations - including supporting evidence and provenance information. It is designed to be flexible, allowing for additional fields to accommodate user needs or project-specific metadata. In the table, each row corresponds to an annotation of a single cell set - which may be at any level of granularity. Each annotation must belong to a labelset. The annotation table includes Cell Annotation Standard columns and Project specific columns. Further information on the Cell Annotation Standard columns can be found in the Cell annotation schema documentation under the annotations section. The Project specific columns are transferred from the original data table . The Project specific columns allow customisation of the annotation table and flexibility over the annotation of the data. Addtional columns can be added via the columns table (see Advanced features) Columns cell set accession : An identifier that can be used to consistently refer to the set of cells being annotated, even if the cell_label changes. cell label : The cell annotation provided by the author. cell fullname : Cell labels often use short acronyms or abbreviations which can be opaque to users outside a particular community. This field allows taxonomy editors to spell out these acronyms to avoid ambiguity, e.g. a it might spell out 'interneuron' where the label field uses 'int' or 'medium spiny neuron' where the label field uses 'MSN'. labelset : Each annotation must belong to one of a set of predefined keys, defined in the labelsets tabe. Each labelset corresponds to a key used to group related annotations in a cell by gene matrix (an obs key in AnnData). parent cell set accession : The ID of the parent of the set described in this row. This is not editable. It is changed automatically by editing parent cell set name parent cell set name : The name (label) of the cell set which is the parent of the set described in this row. This row is editable via autocomplete. Editing it changes the parent cell set accession automatically. cell ontology term id : The ID of the ontology term in the 'cell ontology term' field. This is not editable. It is changed automatically by editing cell ontology term field. cell ontology term : A term from the cell ontology that most closely matches the cell type/class being annotated in this row. rationale : A free text field describing the reasons that editors believe the cells in the set to correspond to the cell type referenced in the cell_label, cell_fullname and cell ontology term fields. Editors are encouraged to use this field to cite relevant publications in-line using standard academic citations of the form (Zheng et al., 2020). All references cited SHOULD be listed using DOIs under rationale_dois. rationale dois : The DOIs of papers supporting the annotation / references in the rationale . maker gene evidence : List of names of genes whose expression in the cells being annotated is explicitly used as evidence for this cell annotation. Each gene MUST be included in the matrix of the AnnData/Seurat file. synonyms : Synonyms of the cell label .","title":"annotation:"},{"location":"UserInterface/#taxonomy-view","text":"Annotation tables are equipped to display data in a hierarchical structure, offering a more intuitive understanding of relationships within the taxonomy. To access this perspective, simply click on the Taxonomy View button. While in the Taxonomy View, users can visually explore the taxonomy's structure in a read-only format, providing a clear overview of the hierarchical relationships. To switch back to a more detailed and interactive tabular format, click the Table View button. Alternatively, users can use Browse in table to jump to the node in the table view. Search functionality is available in the Taxonomy View, allowing users to quickly locate specific nodes within the taxonomy. By entering a search term in the search bar, users can reveal the term in the taxonomy tree.","title":"Taxonomy view"},{"location":"UserInterface/#table-management","text":"This section shows how to interact with the Tables within the TDT. In this documentation, the overview of the table management is shown with the annotation table.","title":"Table Management"},{"location":"UserInterface/#sorting-and-filtering-data","text":"By clicking on column names, pop-up widget enabling data-sort and filtering can be activated. This widget allows for the alphabetical sorting of data and the application of conditions to filter data accordingly. Icons next to the column header indicate active sorting or filtering, and clicking the column header again lets you update or clear these parameters.","title":"Sorting and Filtering Data"},{"location":"UserInterface/#reset-table","text":"To reset the sorting and filtering of the table select the Reset button underneath the table name.","title":"Reset Table"},{"location":"UserInterface/#adding-new-records","text":"Add row button can be used to add new records to the table. By selecting Add row , a new page will open, start inserting the informations for the new row. The option cell set accession will be auto-filled with a new cell set unique identifier. To know what each option represents, hover on the question mark icon near each option.","title":"Adding New Records"},{"location":"UserInterface/#editing-existing-data","text":"Users can edit records by clicking on the pen icon located at the start of each row. This action directs the user to a data submission form that supports autofill, allowing for efficient data entry. After validating the entered data, users can finalize their edits by clicking the Submit button. Some options will have a dropdown menu with suggested terms. For exmaple the annotation.labelset field has a drop-down list of labelsets defined in the labelset` table. Example: In the dataset generated from the AIT115_annotation_sheet , by selecting the empty box for the labelset option the dropdown options are the labelsets Class , Cluster , Neighborhood and Subclass . Example: When editing the parent cell set name , suggested terms will appear as a dropdown menu. Some options will automatically fill other fields linked to them. Example: When changing the parent cell set name field, the parent cell set accession field will also change. To add a pre-existing Cell Ontology term select the cell ontology term option and start typing the cell term of interest. A dropdown menu will appear with different options for pre-existing ontology terms. After selecting the cell ontology term of interest, the cell ontology term option and the cell ontology term ID will be autofilled.","title":"Editing Existing Data"},{"location":"UserInterface/#saving-existing-or-new-data","text":"To save the modified or newly added row select Submit at the bottom right corner of the page. The Validate option will ensure that the terms added in each column follow the Cell Annotation Schema and any additional schema specified for this particular taxonomy.","title":"Saving existing or new data"},{"location":"UserInterface/#actions","text":"The following menu includes a series of comands to save and export your data.","title":"Actions"},{"location":"UserInterface/#save","text":"All user modifications are automatically saved to the internal database. However, if user wants to save changes back to the source tsv files located in the project curation_tables/ folder, save action can be utilized. In the Actions menu, select the File dropdown menu. Two options will be displayed save and publish . The save button allows to save your progress in a syncronised fashion so that other curators of the same taxonomy can see and track the progress. The syncronisation of the saved progress gives the opportunity to multiple users to work collaboratevely on a unified dataset. The publish button allows to create a public release of the taxonomy on GitHub with a Persistent URL that serves as a resolveable identifier for that release. It is important to note that the accessiblity of a published taxonomy is controlled through GitHub. Editor may choose to publish and share interim versions internally. The Persistent URL serves as a way to permanently referenceand retrieve a version used in analysis.","title":"Save"},{"location":"UserInterface/#export","text":"Under the Actions menu, select the Export drowpdown menu. Two options will be diplayed To CAS and To AnnData .","title":"Export"},{"location":"UserInterface/#to-cas","text":"This action converts all data into a JSON file formatted according to the Cell Annotation Schema located in the project's root directory.","title":"To CAS"},{"location":"UserInterface/#to-anndata","text":"Apply your modifications directly to the associated AnnData file for the taxonomy. The metadata table contains a matrix_file_id column, representing a resolvable ID for a cell-by-gene matrix file, formatted as namespace:accession . For example, CellXGene_dataset:8e10f1c4-8e98-41e5-b65f-8cd89a887122 (Please refer to the cell-annotation-schema registry for a list of supported namespaces.) Upon initial launch, TDT creates a tdt_datasets directory in the user home folder. It attempts to resolve all matrix_file_id references within this directory. The system searches for the corresponding file (e.g., $HOME/tdt_datasets/8e10f1c4-8e98-41e5-b65f-8cd89a887122.h5ad ) and then initiates a cas-tools flatten operation . This process, which may vary in duration depending on the taxonomy's size, results in a new AnnData file ( /tdt_datasets/$$TAXONOMY_ID$$.h5ad ) incorporating the user's annotations.","title":"To AnnData"},{"location":"UserInterface/#advanced-options","text":"","title":"Advanced options"},{"location":"UserInterface/#system-tables","text":"System tables allow us to inspect the taxonomy schema and to extend it with new columns and datatypes. table : This table lists all the tables present in the TDT and it appears in the default page of the TDT. datatype : this table shows all the datatype columns present in each table. column : This table contains all the columns present in each table. message : This table contains all validation error messages.","title":"System tables:"},{"location":"UserInterface/#change-table-format","text":"The table format can be changed by selecting the Format button underneath the table name. This will open a dropdown menu with a series of options to display the data in different format of a TSV or a CSV table; Plain Text or in a Json raw or page format (for more information about Json format have a look at additional resources ). In addition to the Json raw or page option, the options Json(raw, pretty) and Json(page, pretty) are available to display the data in a Json format that is easier to read. ### Version Control Under the Action dropdown menu, a complete set of Git version control options are available. The verson control menu is intended for comunities of users who are comfortable working with GitHub.","title":"Change Table Format"},{"location":"config/","text":"Configuring a new project New projects need configuration Project Config To start a new project, we need to collect some general metadata. Here, for example, is a project configuration for the non-neuronal component of Human Brain Cell Atlas v1.0: id: CS202210140 title: Human Brain Cell Atlas v1.0 - non neuronal description: \"Atlas of human primary motor cortex (M1), developed in collaboration with the BRAIN Initiative Cell Census Network (BICCN), non neuronal cells. matrix_file_id: CellXGene_dataset:b165f033-9dec-468a-9248-802fc6902a74 github_org: brain-bican repo: human-brain-cell-atlas_v1_non-neuronal author: https://orcid.org/0000-0001-7620-8973 accession_id_prefix: CS202210140_ citation: DOI:10.1126/science.add7046 creators: - https://orcid.org/0000-0001-7258-9596 - https://orcid.org/0000-0002-3315-2794 #datasets_folder: /path/to/tdt_datasets id : should specify a unique ID for the taxonomy. This is used to name files as well as URLs from which the taxonomy can be retrieved. title and description should be self-explanatory. matrix_file_id : An ID that can be used to resolve a cell by gene matrix file in AnnData (h5ad) format. In this case the file in question is present on CZ CELLxGENE. TDT (and CAS-Tools) recognises the prefix and uses this to retrieve the relevant file. github_org : The GitHub organization that hosts the taxonomy. For BICAN this should be brain-bican, although you could use your own GitHub username if you want to experiment. author : Every taxonomy must have a primary author. We use ORCID to record this. accession_id_prefix : The prefix used to create IDs for new cell sets added to the taxonomy citation : DOI of associated paper (where the taxonomy is for a published dataset) creators : ORCIDs or all other authors should be included here datasets_folder : (Optional) This property is only support in linux/macOS systems. The folder where the AnnData files are stored. If not provided, the datasets will be stored in the default location ( $USER_HOME/tdt_datasets ). Please note that using a network drive will slow down the AnnData related actions such as Export > To CAS and Export > To AnnData . custom_purl : (Optional) A custom purl for the taxonomy to be used on GitHub Pages documentation. If not provided, a purl will be generated based on the github_org and repo fields. Configure seeding a new taxonomy from an existing informal taxonomy. TDT supports seeding of new taxonomies from existing informal taxonomy spreadsheets. The entire content of these spreadsheets is preserved and editable within the TDT annotation table. A simple configuration file supports mapping of relevant content into the content in Cell Annotation Schema (CAS) Taxonomy standard. Configuration assumes informal taxonomies will have 1 row per cluster (where cluster is the most granular level in the hierarchy), 1 column per heirarchy level and that additional columns record information about clusters. For example, the following informal taxonomy has one row per cluster - with cluster identity indicated by the first 2 columns. The next 3 columns specify different taxonomy levels. We record this in the config as follows: fields: - column_name: cluster_id column_type: cluster_id rank: 0 - column_name: Cluster column_type: cluster_name rank: 0 - column_name: Subclass column_type: cell_set rank: 1 - column_name: Neighborhood column_type: cell_set rank: 2 - column_name: Class column_type: cell_set rank: 3 The rank field indicates level in the heirarchy. The most granular level (cluster) gets rank: 0 , the next level up in the heirarchy gets rank: 1 etc. Our aim is to gradually increase the number of types of field that can be mapped into the schema and can benefit from autocomplete editing, including fields for recording markers and anatomical locations.","title":"Configuring a new project"},{"location":"config/#configuring-a-new-project","text":"New projects need configuration","title":"Configuring a new project"},{"location":"config/#project-config","text":"To start a new project, we need to collect some general metadata. Here, for example, is a project configuration for the non-neuronal component of Human Brain Cell Atlas v1.0: id: CS202210140 title: Human Brain Cell Atlas v1.0 - non neuronal description: \"Atlas of human primary motor cortex (M1), developed in collaboration with the BRAIN Initiative Cell Census Network (BICCN), non neuronal cells. matrix_file_id: CellXGene_dataset:b165f033-9dec-468a-9248-802fc6902a74 github_org: brain-bican repo: human-brain-cell-atlas_v1_non-neuronal author: https://orcid.org/0000-0001-7620-8973 accession_id_prefix: CS202210140_ citation: DOI:10.1126/science.add7046 creators: - https://orcid.org/0000-0001-7258-9596 - https://orcid.org/0000-0002-3315-2794 #datasets_folder: /path/to/tdt_datasets id : should specify a unique ID for the taxonomy. This is used to name files as well as URLs from which the taxonomy can be retrieved. title and description should be self-explanatory. matrix_file_id : An ID that can be used to resolve a cell by gene matrix file in AnnData (h5ad) format. In this case the file in question is present on CZ CELLxGENE. TDT (and CAS-Tools) recognises the prefix and uses this to retrieve the relevant file. github_org : The GitHub organization that hosts the taxonomy. For BICAN this should be brain-bican, although you could use your own GitHub username if you want to experiment. author : Every taxonomy must have a primary author. We use ORCID to record this. accession_id_prefix : The prefix used to create IDs for new cell sets added to the taxonomy citation : DOI of associated paper (where the taxonomy is for a published dataset) creators : ORCIDs or all other authors should be included here datasets_folder : (Optional) This property is only support in linux/macOS systems. The folder where the AnnData files are stored. If not provided, the datasets will be stored in the default location ( $USER_HOME/tdt_datasets ). Please note that using a network drive will slow down the AnnData related actions such as Export > To CAS and Export > To AnnData . custom_purl : (Optional) A custom purl for the taxonomy to be used on GitHub Pages documentation. If not provided, a purl will be generated based on the github_org and repo fields.","title":"Project Config"},{"location":"config/#configure-seeding-a-new-taxonomy-from-an-existing-informal-taxonomy","text":"TDT supports seeding of new taxonomies from existing informal taxonomy spreadsheets. The entire content of these spreadsheets is preserved and editable within the TDT annotation table. A simple configuration file supports mapping of relevant content into the content in Cell Annotation Schema (CAS) Taxonomy standard. Configuration assumes informal taxonomies will have 1 row per cluster (where cluster is the most granular level in the hierarchy), 1 column per heirarchy level and that additional columns record information about clusters. For example, the following informal taxonomy has one row per cluster - with cluster identity indicated by the first 2 columns. The next 3 columns specify different taxonomy levels. We record this in the config as follows: fields: - column_name: cluster_id column_type: cluster_id rank: 0 - column_name: Cluster column_type: cluster_name rank: 0 - column_name: Subclass column_type: cell_set rank: 1 - column_name: Neighborhood column_type: cell_set rank: 2 - column_name: Class column_type: cell_set rank: 3 The rank field indicates level in the heirarchy. The most granular level (cluster) gets rank: 0 , the next level up in the heirarchy gets rank: 1 etc. Our aim is to gradually increase the number of types of field that can be mapped into the schema and can benefit from autocomplete editing, including fields for recording markers and anatomical locations.","title":"Configure seeding a new taxonomy from an existing informal taxonomy."}]}