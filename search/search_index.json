{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Taxonomy Development Tools Guide This guide is intended for maintainers and editors of CCN2 Taxonomies. The first part of the guide is how to set up a new taxonomy project. This requires some technical steps. The second part of the guide is for curating the CCN2 taxonomies. Create a New Repo Get TDT Docker Image Start Curating Taxonomies","title":"Getting started"},{"location":"#taxonomy-development-tools-guide","text":"This guide is intended for maintainers and editors of CCN2 Taxonomies. The first part of the guide is how to set up a new taxonomy project. This requires some technical steps. The second part of the guide is for curating the CCN2 taxonomies. Create a New Repo Get TDT Docker Image Start Curating Taxonomies","title":"Taxonomy Development Tools Guide"},{"location":"Build/","text":"Get Taxonomy Development Tools You can download TDT Docker image through following the steps defined in project GitHub Container Registry . docker pull ghcr.io/brain-bican/taxonomy-development-tools:latest Update Taxonomy Development Tools to the latest version You can update TDT Docker image to the latest version through: Stop running TDT containers: docker stop $(docker ps -a -q --filter ancestor=ghcr.io/brain-bican/taxonomy-development-tools:latest) Remove the existing TDT image and pull the latest one: docker rmi $(docker images 'ghcr.io/brain-bican/taxonomy-development-tools:latest' -a -q | uniq) docker pull ghcr.io/brain-bican/taxonomy-development-tools:latest Install requirements Docker Install Docker and make sure its runnning properly, for example by typing docker ps in your terminal or command line (CMD). If all is ok, you should be seeing something like: CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES Git Setup your GitHub user configs git config --global user.name \"your_github_user\" git config --global user.email \"your_github_email\" Create a GitHub personal access token . Set GH_TOKEN environment variable. You can use nano or any other editor to edit the files. For bash (Linux): nano ~/.bashrc For zshrc (MacOS): nano ~/.zshrc When the file opens, add the environment variable in a new line: export GH_TOKEN=my_github_personal_access_token_here` Reinitialize the configuration file to apply the changes to the current session: source ~/.bashrc or source ~/.zshrc Test your new config: echo $GH_TOKEN Build Taxonomy Development Tools (Optional) Users are suggested to use the Get Taxonomy Development Tools step to have a TDT Docker Image. But, alternatively, you can build TDT docker image in your local. Checkout the project and run given command in the project root folder: docker build --no-cache -t \"ghcr.io/brain-bican/taxonomy-development-tools\" .","title":"Get TDT Docker Image"},{"location":"Build/#get-taxonomy-development-tools","text":"You can download TDT Docker image through following the steps defined in project GitHub Container Registry . docker pull ghcr.io/brain-bican/taxonomy-development-tools:latest","title":"Get Taxonomy Development Tools"},{"location":"Build/#update-taxonomy-development-tools-to-the-latest-version","text":"You can update TDT Docker image to the latest version through: Stop running TDT containers: docker stop $(docker ps -a -q --filter ancestor=ghcr.io/brain-bican/taxonomy-development-tools:latest) Remove the existing TDT image and pull the latest one: docker rmi $(docker images 'ghcr.io/brain-bican/taxonomy-development-tools:latest' -a -q | uniq) docker pull ghcr.io/brain-bican/taxonomy-development-tools:latest","title":"Update Taxonomy Development Tools to the latest version"},{"location":"Build/#install-requirements","text":"","title":"Install requirements"},{"location":"Build/#docker","text":"Install Docker and make sure its runnning properly, for example by typing docker ps in your terminal or command line (CMD). If all is ok, you should be seeing something like: CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES","title":"Docker"},{"location":"Build/#git","text":"Setup your GitHub user configs git config --global user.name \"your_github_user\" git config --global user.email \"your_github_email\" Create a GitHub personal access token . Set GH_TOKEN environment variable. You can use nano or any other editor to edit the files. For bash (Linux): nano ~/.bashrc For zshrc (MacOS): nano ~/.zshrc When the file opens, add the environment variable in a new line: export GH_TOKEN=my_github_personal_access_token_here` Reinitialize the configuration file to apply the changes to the current session: source ~/.bashrc or source ~/.zshrc Test your new config: echo $GH_TOKEN","title":"Git"},{"location":"Build/#build-taxonomy-development-tools-optional","text":"Users are suggested to use the Get Taxonomy Development Tools step to have a TDT Docker Image. But, alternatively, you can build TDT docker image in your local. Checkout the project and run given command in the project root folder: docker build --no-cache -t \"ghcr.io/brain-bican/taxonomy-development-tools\" .","title":"Build Taxonomy Development Tools (Optional)"},{"location":"Curation/","text":"CCN2 Taxonomy Curation with the Taxonomy Development Tools 1- Pull the latest TDT docker image via following the steps defined in the project GitHub Container Registry . docker pull ghcr.io/brain-bican/taxonomy-development-tools:latest 2- Place your data (ex. AIT115_annotation_sheet.tsv ) and configuration file (ex. test_config.yaml ) into your project's input_data folder. 3- Run following command to ingest your data files: bash ./run.sh make load_data 4- Run following command to run the online data editor: bash ./run.sh make serve This command will print a set of logs including a log like nanobot::serve: listening on 0.0.0.0:3000 . This means your web editor is ready, and you can start editing your data. 5- You can start browsing web taxonomy editor from: http://localhost:3000/table Saving Edited Data Once you complete your editing, you can run the following command to save your online edited data to your local: bash ./run.sh make save Your data will be saved into curation_tables folder","title":"Start Curating Taxonomies"},{"location":"Curation/#ccn2-taxonomy-curation-with-the-taxonomy-development-tools","text":"1- Pull the latest TDT docker image via following the steps defined in the project GitHub Container Registry . docker pull ghcr.io/brain-bican/taxonomy-development-tools:latest 2- Place your data (ex. AIT115_annotation_sheet.tsv ) and configuration file (ex. test_config.yaml ) into your project's input_data folder. 3- Run following command to ingest your data files: bash ./run.sh make load_data 4- Run following command to run the online data editor: bash ./run.sh make serve This command will print a set of logs including a log like nanobot::serve: listening on 0.0.0.0:3000 . This means your web editor is ready, and you can start editing your data. 5- You can start browsing web taxonomy editor from: http://localhost:3000/table","title":"CCN2 Taxonomy Curation with the Taxonomy Development Tools"},{"location":"Curation/#saving-edited-data","text":"Once you complete your editing, you can run the following command to save your online edited data to your local: bash ./run.sh make save Your data will be saved into curation_tables folder","title":"Saving Edited Data"},{"location":"NewRepo/","text":"Creating a new Repository with the Taxonomy Development Tools This is instructions on how to create a CCN2 taxonomy repository in GitHub. This will only need to be done once per taxonomy. You may need assistance from someone with basic unix knowledge in following instructions here. We will walk you though the steps to make a new ontology project 1. Download the wrapper script and pull latest ODK version Linux/Mac: seed-via-docker.sh PC: seed-via-docker.bat Make sure to save the wrapper script in your working directory and that the filetype is correct. You should have git installed - for the repo command to work perfectly, it requires a .gitconfig file in your user directory! First, make sure you have Docker running (you will see the Docker whale in your toolbar on a Mac) To make sure you have the latest version of the TDT installed, run in the command line docker pull ghcr.io/brain-bican/taxonomy-development-tools:latest NOTE The very first time you run this it may be slow, while docker downloads necessary images. Don't worry, subsequent runs should be much faster! NOTE Windows users, occasionally it has been reported that files downloaded on a Windows machine get a wrong file ending, for example seed-via-docker.bat.txt instead of seed-via-docker.bat , or, as we will see later, project.yaml.txt instead of project.yaml . If you have problems, double check your files are named correctly after the download! 3. Run the wrapper script You can pass in a configuration file in YAML format that specifies your taxonomy project setup. You can use dir in your command line on PC to ensure that your wrapper script, .gitconfig, and project.yaml (if you so choose) are all in the correct directory before running the wrapper script. Unix (Max, Linux) Using the predefined CCN20230601_project_config.yaml file: ./seed-via-docker.sh -C CCN20230601_project_config.yaml Windows Using the predefined CCN20230601_project_config.yaml config file: seed-via-docker.bat -C CCN20230601_project_config.yaml This will create your starter files in target/human_m1 . It will also prepare an initial release and initialize a local repository (not yet pushed to your Git host site such as GitHub or GitLab). Problems? There are three frequently encountered problems at this stage: No .gitconfig in user directory Spaces is user path During download, your filenames got changed (Windows) No .gitconfig in user directory The seed-via-docker script requires a .gitconfig file in your user directory. If your .gitconfig is in a different directory, you need to change the path in the downloaded seed-via-docker script. For example on Windows (look at seed-via-docker.bat ): docker run -v %userprofile%/.gitconfig:/root/.gitconfig -v %cd%:/work -w /work --rm -ti brain-bican/tdt /tools/tdt.py seed %* %userprofile%/.gitconfig should be changed to the correct path of your local .gitconfig file. Spaces is user path We have had reports of users having trouble if there are paths (say, D:\\data ) contain a space symbol, like D:/Dropbox (Personal) or similar. In this case, we recommend to find a directory you can work in that does not contain a space symbol. You can customize at this stage, but we recommend to first push the changes to you Git hosting site (see next steps). During download, your filenames got changed (Windows) Windows users, occasionally it has been reported that files downloaded on a Windows machine get a wrong file ending, for example seed-via-docker.bat.txt instead of seed-via-docker.bat , or, as we will see later, project.yaml.txt instead of project.yaml . If you have problems, double-check your files are named correctly after the download! 4. Push to Git hosting website The development kit will automatically initialize a git project, add all files and commit. You will need to create a project on you Git hosting site. For GitHub: Go to: https://github.com/new The owner MUST be the org you selected with the github_org option in the project yaml file. Repo name should be same with the repo option Do not initialize with a README (you already have one) Click Create See the section under \"\u2026or push an existing repository from the command line\" For GitLab: Go to: https://gitlab.com/projects/new The owner MUST be the org you selected with the github_org option in the project yaml file. Repo name should be same with the repo option Do not initialize with a README (you already have one) Click 'Create project' See the section under \"Push an existing Git repository\" Follow the instructions there. E.g. (make sure the location of your remote is exactly correct!). cd target/human_m1 git remote add origin https://github.com/hkir-dev/human_m1.git git branch -M main git push -u origin main Note: you can now mv target/human_m1 to anywhere you like in your home directory. Or you can do a fresh checkout from github. Additional You will want to also: enable GitHub actions","title":"Create a New Repo"},{"location":"NewRepo/#creating-a-new-repository-with-the-taxonomy-development-tools","text":"This is instructions on how to create a CCN2 taxonomy repository in GitHub. This will only need to be done once per taxonomy. You may need assistance from someone with basic unix knowledge in following instructions here. We will walk you though the steps to make a new ontology project","title":"Creating a new Repository with the Taxonomy Development Tools"},{"location":"NewRepo/#1-download-the-wrapper-script-and-pull-latest-odk-version","text":"Linux/Mac: seed-via-docker.sh PC: seed-via-docker.bat Make sure to save the wrapper script in your working directory and that the filetype is correct. You should have git installed - for the repo command to work perfectly, it requires a .gitconfig file in your user directory! First, make sure you have Docker running (you will see the Docker whale in your toolbar on a Mac) To make sure you have the latest version of the TDT installed, run in the command line docker pull ghcr.io/brain-bican/taxonomy-development-tools:latest NOTE The very first time you run this it may be slow, while docker downloads necessary images. Don't worry, subsequent runs should be much faster! NOTE Windows users, occasionally it has been reported that files downloaded on a Windows machine get a wrong file ending, for example seed-via-docker.bat.txt instead of seed-via-docker.bat , or, as we will see later, project.yaml.txt instead of project.yaml . If you have problems, double check your files are named correctly after the download!","title":"1. Download the wrapper script and pull latest ODK version"},{"location":"NewRepo/#3-run-the-wrapper-script","text":"You can pass in a configuration file in YAML format that specifies your taxonomy project setup. You can use dir in your command line on PC to ensure that your wrapper script, .gitconfig, and project.yaml (if you so choose) are all in the correct directory before running the wrapper script.","title":"3. Run the wrapper script"},{"location":"NewRepo/#unix-max-linux","text":"Using the predefined CCN20230601_project_config.yaml file: ./seed-via-docker.sh -C CCN20230601_project_config.yaml","title":"Unix (Max, Linux)"},{"location":"NewRepo/#windows","text":"Using the predefined CCN20230601_project_config.yaml config file: seed-via-docker.bat -C CCN20230601_project_config.yaml This will create your starter files in target/human_m1 . It will also prepare an initial release and initialize a local repository (not yet pushed to your Git host site such as GitHub or GitLab).","title":"Windows"},{"location":"NewRepo/#problems","text":"There are three frequently encountered problems at this stage: No .gitconfig in user directory Spaces is user path During download, your filenames got changed (Windows)","title":"Problems?"},{"location":"NewRepo/#no-gitconfig-in-user-directory","text":"The seed-via-docker script requires a .gitconfig file in your user directory. If your .gitconfig is in a different directory, you need to change the path in the downloaded seed-via-docker script. For example on Windows (look at seed-via-docker.bat ): docker run -v %userprofile%/.gitconfig:/root/.gitconfig -v %cd%:/work -w /work --rm -ti brain-bican/tdt /tools/tdt.py seed %* %userprofile%/.gitconfig should be changed to the correct path of your local .gitconfig file.","title":"No .gitconfig in user directory"},{"location":"NewRepo/#spaces-is-user-path","text":"We have had reports of users having trouble if there are paths (say, D:\\data ) contain a space symbol, like D:/Dropbox (Personal) or similar. In this case, we recommend to find a directory you can work in that does not contain a space symbol. You can customize at this stage, but we recommend to first push the changes to you Git hosting site (see next steps).","title":"Spaces is user path"},{"location":"NewRepo/#during-download-your-filenames-got-changed-windows","text":"Windows users, occasionally it has been reported that files downloaded on a Windows machine get a wrong file ending, for example seed-via-docker.bat.txt instead of seed-via-docker.bat , or, as we will see later, project.yaml.txt instead of project.yaml . If you have problems, double-check your files are named correctly after the download!","title":"During download, your filenames got changed (Windows)"},{"location":"NewRepo/#4-push-to-git-hosting-website","text":"The development kit will automatically initialize a git project, add all files and commit. You will need to create a project on you Git hosting site. For GitHub: Go to: https://github.com/new The owner MUST be the org you selected with the github_org option in the project yaml file. Repo name should be same with the repo option Do not initialize with a README (you already have one) Click Create See the section under \"\u2026or push an existing repository from the command line\" For GitLab: Go to: https://gitlab.com/projects/new The owner MUST be the org you selected with the github_org option in the project yaml file. Repo name should be same with the repo option Do not initialize with a README (you already have one) Click 'Create project' See the section under \"Push an existing Git repository\" Follow the instructions there. E.g. (make sure the location of your remote is exactly correct!). cd target/human_m1 git remote add origin https://github.com/hkir-dev/human_m1.git git branch -M main git push -u origin main Note: you can now mv target/human_m1 to anywhere you like in your home directory. Or you can do a fresh checkout from github.","title":"4. Push to Git hosting website"},{"location":"NewRepo/#additional","text":"You will want to also: enable GitHub actions","title":"Additional"}]}